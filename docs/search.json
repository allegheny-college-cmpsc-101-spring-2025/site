[
  {
    "objectID": "discord.html",
    "href": "discord.html",
    "title": "Discord Channel",
    "section": "",
    "text": "First time only, use the invite link here\nAccess the Data Structures Discord Channel here"
  },
  {
    "objectID": "discord.html#announcements",
    "href": "discord.html#announcements",
    "title": "Discord Channel",
    "section": "Announcements",
    "text": "Announcements\n\n\n\nMade with https://docs.widgetbot.io/"
  },
  {
    "objectID": "slides/04-python-foundations.html#goals",
    "href": "slides/04-python-foundations.html#goals",
    "title": "Python Foundations",
    "section": "Goals",
    "text": "Goals\n\nReview Python literals\nReview Python variables and operators\nReview Python loops and conditionals\nReview Python squaring algorithms\nReview Python strings and slicing"
  },
  {
    "objectID": "slides/04-python-foundations.html#string",
    "href": "slides/04-python-foundations.html#string",
    "title": "Python Foundations",
    "section": "String",
    "text": "String\n\nprint(\"Hello\")\nprint(type(\"Hello\"))\n\n\n\nHello\n&lt;class 'str'&gt;\n\n\n\nTODO: print your name below"
  },
  {
    "objectID": "slides/04-python-foundations.html#integer",
    "href": "slides/04-python-foundations.html#integer",
    "title": "Python Foundations",
    "section": "Integer",
    "text": "Integer\n\nprint(101)\nprint(type(101))\n\n\n\n101\n&lt;class 'int'&gt;\n\n\n\nTODO: print an integer literal that is negative"
  },
  {
    "objectID": "slides/04-python-foundations.html#float",
    "href": "slides/04-python-foundations.html#float",
    "title": "Python Foundations",
    "section": "Float",
    "text": "Float\n\nprint(101.1)\nprint(type(101.1))\n\n\n\n101.1\n&lt;class 'float'&gt;\n\n\n\nTODO: print a float literal that is negative"
  },
  {
    "objectID": "slides/04-python-foundations.html#boolean",
    "href": "slides/04-python-foundations.html#boolean",
    "title": "Python Foundations",
    "section": "Boolean",
    "text": "Boolean\n\nprint(True)\nprint(type(True))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\nTODO: print a boolean literal that is not True"
  },
  {
    "objectID": "slides/04-python-foundations.html#list",
    "href": "slides/04-python-foundations.html#list",
    "title": "Python Foundations",
    "section": "List",
    "text": "List\n\nprint([False, -12, -34.1, \"literals!\"])\nprint(type([False, -12, -34.1, \"literals!\"]))\n\n\n\n[False, -12, -34.1, 'literals!']\n&lt;class 'list'&gt;\n\n\n\nTODO: print a list literal that has 3 integers"
  },
  {
    "objectID": "slides/04-python-foundations.html#tuple",
    "href": "slides/04-python-foundations.html#tuple",
    "title": "Python Foundations",
    "section": "Tuple",
    "text": "Tuple\n\nprint((False, -12, -34.1, \"literals!\"))\nprint(type((False, -12, -34.1, \"literals!\")))\n\n\n\n(False, -12, -34.1, 'literals!')\n&lt;class 'tuple'&gt;\n\n\n\nTODO: print a tuple literal that has 3 floats"
  },
  {
    "objectID": "slides/04-python-foundations.html#assignment",
    "href": "slides/04-python-foundations.html#assignment",
    "title": "Python Foundations",
    "section": "Assignment",
    "text": "Assignment\n\na = [False, -12, -34.1, \"assignment!\"]\nprint(a)\nprint(type(a))\n\n\n\n[False, -12, -34.1, 'assignment!']\n&lt;class 'list'&gt;\n\n\n\n\n[False, -12, -34.1, \"assignment!\"] is the object in memory\na is the variable name given to the object\n= operator used\nvariable name always goes on the left hand side of ="
  },
  {
    "objectID": "slides/04-python-foundations.html#arithmetic",
    "href": "slides/04-python-foundations.html#arithmetic",
    "title": "Python Foundations",
    "section": "Arithmetic",
    "text": "Arithmetic\n\nitem1 = 100\nitem2 = 11\naddition_ex = item1 + item2\nmult_ex = item1 * item2\ndiv_ex = item1 / item2\nfloor_div_ex = item1 // item2\npower_ex = item2 ** 2\nmod_ex = item2 % 7 \n\nprint(f\"addition_ex is {addition_ex}\")\nprint(f\"mult_ex is {mult_ex}\")\nprint(f\"div_ex is {div_ex}\")\nprint(f\"floor_div_ex is {floor_div_ex}\")\nprint(f\"power_ex is {power_ex}\")\nprint(f\"mod_ex is {mod_ex}\")\n\n\n\naddition_ex is 111\nmult_ex is 1100\ndiv_ex is 9.090909090909092\nfloor_div_ex is 9\npower_ex is 121\nmod_ex is 4"
  },
  {
    "objectID": "slides/04-python-foundations.html#comparison",
    "href": "slides/04-python-foundations.html#comparison",
    "title": "Python Foundations",
    "section": "Comparison",
    "text": "Comparison\n\nitem1 = 100\nitem2 = 11\ngt = item1 &gt; item2\nlt = item1 &lt; item2\ngte = item1 &gt;= item2\nlte = item1 &lt;= item2\nequal = item1 == item2\nnot_equal = item1 != item2\n\nprint(f\"item1 &gt; item2 is {gt}\")\nprint(f\"item1 &lt; item2 is {lt}\")\nprint(f\"item1 &gt;= item2 is {gte}\")\nprint(f\"item1 &lt;= item2 is {lte}\")\nprint(f\"item1 == item2 is {equal}\")\nprint(f\"item1 != item2 is {not_equal}\")\n\n\n\nitem1 &gt; item2 is True\nitem1 &lt; item2 is False\nitem1 &gt;= item2 is True\nitem1 &lt;= item2 is False\nitem1 == item2 is False\nitem1 != item2 is True"
  },
  {
    "objectID": "slides/04-python-foundations.html#for-loop",
    "href": "slides/04-python-foundations.html#for-loop",
    "title": "Python Foundations",
    "section": "For Loop",
    "text": "For Loop\n\nfor i in range(10):\n    print(i)\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"
  },
  {
    "objectID": "slides/04-python-foundations.html#for-loop-1",
    "href": "slides/04-python-foundations.html#for-loop-1",
    "title": "Python Foundations",
    "section": "For Loop",
    "text": "For Loop\n\nfor i in range(10):\n    print(i)\n\nTODO: Write a for loop to print out the square root of every even integer between 2 and 64, including 64"
  },
  {
    "objectID": "slides/04-python-foundations.html#while-loop",
    "href": "slides/04-python-foundations.html#while-loop",
    "title": "Python Foundations",
    "section": "While Loop",
    "text": "While Loop\n\ni = 0\nwhile i &lt; 10:\n    print(i)\n    i += 1\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"
  },
  {
    "objectID": "slides/04-python-foundations.html#while-loop-1",
    "href": "slides/04-python-foundations.html#while-loop-1",
    "title": "Python Foundations",
    "section": "While Loop",
    "text": "While Loop\n\ni = 0\nwhile i &lt; 10:\n    print(i)\n    i += 1\n\nTODO: What happens if you forget to increment the counter?"
  },
  {
    "objectID": "slides/04-python-foundations.html#conditional",
    "href": "slides/04-python-foundations.html#conditional",
    "title": "Python Foundations",
    "section": "Conditional",
    "text": "Conditional\n\ni = 0\nwhile i &lt; 10:\n    if i % 2 == 1:\n        print(f\"{i} is odd!\")\n    elif i % 3 == 0:\n        print(f\"{i} is divisible by 3!\")\n    i += 1\n\n\n\n0 is divisible by 3!\n1 is odd!\n3 is odd!\n5 is odd!\n6 is divisible by 3!\n7 is odd!\n9 is odd!"
  },
  {
    "objectID": "slides/04-python-foundations.html#conditional-1",
    "href": "slides/04-python-foundations.html#conditional-1",
    "title": "Python Foundations",
    "section": "Conditional",
    "text": "Conditional\nTODO: Write one loop that prints “fizz” for every even number, “buzz” for every multiple of 5, and “fizzbuzz” for even multiples of 5 for integers from 0 to 20 including 20."
  },
  {
    "objectID": "slides/04-python-foundations.html#square-by-addition-in-a-for-loop",
    "href": "slides/04-python-foundations.html#square-by-addition-in-a-for-loop",
    "title": "Python Foundations",
    "section": "Square by Addition in a For Loop",
    "text": "Square by Addition in a For Loop\n\n# choose a value to square\nvalue = 6\n# initialize the answer\nanswer = 0\n# repeatedly increase the answer until getting to the value\nfor _ in range(value):\n    answer += value    \n# print the computed integer squared using a for loop\nprint(f\"{value} squared is {answer}\")\n\n\n\n6 squared is 36"
  },
  {
    "objectID": "slides/04-python-foundations.html#square-by-addition-in-a-while-loop",
    "href": "slides/04-python-foundations.html#square-by-addition-in-a-while-loop",
    "title": "Python Foundations",
    "section": "Square by Addition in a While Loop",
    "text": "Square by Addition in a While Loop\n\n# choose a value to square\nvalue = 7\n# initialize the number of iterations and the answer\ni = 0\nanswer = 0\n# repeatedly increase the answer until getting to the value\nwhile i &lt; value:\n    answer += value\n    i += 1    \n# print the computed integer squared using a while loop\nprint(f\"{value} squared is {answer}\")\n\n\n\n7 squared is 49"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function-1",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function-1",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer\n\n\n\n\nNotice:\n\nkeyword def\nindentation\ntype annotations for input and output : int and -&gt; int\ndocstring \"\"\"Square...\"\"\"\nreturn statement return\n\nTODO: Copy and run it! Why didn’t anything print?"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function-2",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function-2",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer\n\nmy_value = 12\nmy_answer = square_by_addition_while(my_value)\nprint(f\"{my_value} squared is {my_answer}\")\n\n\n\n12 squared is 144\n\n\n\nTODO: What happens if you try to print print(f\"{value} squared is {answer}\")? Clear, then copy the code below, and run it."
  },
  {
    "objectID": "slides/04-python-foundations.html#formatted-strings",
    "href": "slides/04-python-foundations.html#formatted-strings",
    "title": "Python Foundations",
    "section": "Formatted Strings",
    "text": "Formatted Strings\n\nvalue = 12345\nformatted_string = f\"the value is {value}\"\nprint(formatted_string)\n\n\n\nthe value is 12345"
  },
  {
    "objectID": "slides/04-python-foundations.html#slicing",
    "href": "slides/04-python-foundations.html#slicing",
    "title": "Python Foundations",
    "section": "Slicing",
    "text": "Slicing\n\nvalue = 12345\nformatted_string = f\"the value is {value}\"\nprint(formatted_string)\nprint(formatted_string[4:14:1])\n\n\n\nthe value is 12345\nvalue is 1\n\n\n\nThe indices are the starting point, the end point (non-inclusive), the hop"
  },
  {
    "objectID": "slides/04-python-foundations.html#find-further-review-in-chapter-2",
    "href": "slides/04-python-foundations.html#find-further-review-in-chapter-2",
    "title": "Python Foundations",
    "section": "Find Further Review in Chapter 2",
    "text": "Find Further Review in Chapter 2"
  },
  {
    "objectID": "slides/05-numerical-computation.html#goals",
    "href": "slides/05-numerical-computation.html#goals",
    "title": "Numerical Computation",
    "section": "Goals",
    "text": "Goals\n\n\nUnderstand and run multiple algorithms for finding a square root\n\nRandom Guessing\nExhaustive Enumeration\nBisection Search"
  },
  {
    "objectID": "slides/05-numerical-computation.html#square-root-definition",
    "href": "slides/05-numerical-computation.html#square-root-definition",
    "title": "Numerical Computation",
    "section": "Square Root Definition",
    "text": "Square Root Definition\n\n\nThe square root of a given number can be multiplied by itself to get the number.\n\\(\\sqrt{49} = 7\\)\n\\(7 * 7 = 49\\)\nHow can a computer find the \\(\\sqrt{}\\) ?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check",
    "href": "slides/05-numerical-computation.html#guess-and-check",
    "title": "Numerical Computation",
    "section": "Guess and Check",
    "text": "Guess and Check\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\nguess a random number as the solution\nconfirm or deny by squaring it\nrepeat until solution is found\n\n\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# loop while solution has not been found\n    # create random guess\n    # square random guess\n    # if random guess squared IS the original number\n        # return random guess!\n    # Otherwise start process again"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check-1",
    "href": "slides/05-numerical-computation.html#guess-and-check-1",
    "title": "Numerical Computation",
    "section": "Guess and Check",
    "text": "Guess and Check\n\n\nimport random\n\ndef squareroot_gc(number: int) -&gt; int:\n  \"\"\"Guess integer roots and check.\"\"\"\n  while True:\n    guess = random.randint(0, number)\n    if guess**2 == number:\n      return guess\n\n\n\n\n\n\nAny concerns with this code?\n\n\n\nmight never end\nonly works with integer guesses for perfect squares!\ncopy and try it below for a perfect square\ncopy and try it below for a non-perfect square"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check-with-a-limit",
    "href": "slides/05-numerical-computation.html#guess-and-check-with-a-limit",
    "title": "Numerical Computation",
    "section": "Guess and Check (with a limit)",
    "text": "Guess and Check (with a limit)\n\n\nimport random\n\ndef squareroot_gcl(number: int) -&gt; int:\n  \"\"\"Guess integer roots and check.\"\"\"\n  num_guesses_allowed = 100\n  num_guesses_sofar = 0\n  while num_guesses_sofar &lt; num_guesses_allowed:\n    guess = random.randint(0, number)\n    if guess**2 == number:\n      return guess\n    num_guesses_sofar += 1\n  return -1\n\n\n\n\n\n\n\ncopy and try it below!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#random-guessing-summary",
    "href": "slides/05-numerical-computation.html#random-guessing-summary",
    "title": "Numerical Computation",
    "section": "Random Guessing Summary",
    "text": "Random Guessing Summary\n\n\nSimple algorithm\nMight never find the right answer"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration",
    "text": "Exhaustive Enumeration\n\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\ndon’t do random guessing and checking, do it in an organized way\ncheck every number in a range, in order, exhaustively\nconfirm or deny by squaring it\nrepeat until solution is found\n\n\n\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# loop through a range\n    # Consider index in the range\n    # square the index\n    # if index squared IS the original number\n        # return it!\n    # Otherwise move on to next item in the range"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-for-loop",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-for-loop",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (for loop)",
    "text": "Exhaustive Enumeration (for loop)\n\n\n# Exhaustive Enumeration for perfect squares\n\ndef squareroot_eep(number: int) -&gt; int:\n  \"\"\"Exaustively check integer roots.\"\"\"\n  for possible_answer in range(number):\n    if possible_answer**2 == number:\n      return possible_answer\n  return -1\n\n\n\n\n\n\nAny concerns with this code?\n\n\n\ntry it with 12345 * 12345\ntry it with 144.1 * 144.1\nthe code only works when there is an integer solution"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-while-loop",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-while-loop",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (while loop)",
    "text": "Exhaustive Enumeration (while loop)\n\n\n# Exhaustive Enumeration for perfect squares\n\ndef squareroot_eep_while(number: int) -&gt; int:\n  \"\"\"Exaustively check integer roots.\"\"\"\n  possible_answer = 0\n  while possible_answer**2 &lt;= number:\n    if possible_answer**2 == number:\n        return possible_answer\n    possible_answer += 1\n  return -1 # no answer found\n\n\n\n\n\n\nTry it!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-1",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-1",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration",
    "text": "Exhaustive Enumeration\nExhaustive enumeration is like moving along a number line.\n\n\nBut number lines with integers are only useful for finding the square roots of perfect squares."
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\n\nLet’s use a much finer number line to find non-integer solutions.\nWe will also use the concept of an allowed margin of error, \\(\\epsilon\\) for solutions that are “good enough”.\nFor example, what is the sqrt of 26?\n5.1 * 5.1 = 26.01, so depending on \\(\\epsilon\\), we might accept or reject the solution of 5.1"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-1",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-1",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# define an epsilon (allowed margin of error)\n# define a tiny step size\n# initialize the possible answer\n# while loop so long as possible_answer**2 is too small, allowing for the margin of error \n    # increase possible answer by the tiny step size"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-2",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-2",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\n\n# Exhaustive Enumeration for non-perfect squares\n\ndef squareroot_ee(number: int) -&gt; float:\n  \"\"\"Exhaustively check all possible non-integer roots.\"\"\"\n  epsilon = 0.01 # margin of error\n  step_size = epsilon**2\n  possible_answer = 0\n  while possible_answer**2 &lt; number + epsilon:\n    if possible_answer**2 &gt; number - epsilon:\n        return possible_answer # good!\n    possible_answer += step_size\n  return possible_answer # not so good!\n\nprint(squareroot_ee(26))\n\n\n\n5.098100000001457\n\n\n\n\nWhy is line 12 marked as “not so good” after the while loop?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-summary",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-summary",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration Summary",
    "text": "Exhaustive Enumeration Summary\n\n\nPossible solutions are checked in order\nStep sizes can be integer or non-integer\nMany steps could be required!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search",
    "href": "slides/05-numerical-computation.html#bisection-search",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\n\n\n\nHow do you use this?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-1",
    "href": "slides/05-numerical-computation.html#bisection-search-1",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\n\nBisection search is like searching through a Merriam Webster paper dictionary for a specific word.\nYou zero in on the word by going forward or backward multiple times\nFor square roots, you zero in on the solution by going forward or backward multiple times\nThere is no number line in bisection search for square roots\nThere is no step size because the search does not proceed linearly"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-2",
    "href": "slides/05-numerical-computation.html#bisection-search-2",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\ndefine a search range with an upper and lower bound\ncheck middle number in a range\nconfirm or deny by squaring it\neliminate half of the search range intelligently\nrepeat until a “good enough” solution is found"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-3",
    "href": "slides/05-numerical-computation.html#bisection-search-3",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# define an epsilon (allowed margin of error)\n# initialize the search space starting and ending value\n# initialize the possible answer to the middle of the search space\n# while loop so long as possible_answer**2 is not _within_ the margin of error (±)\n    # if the possible_answer ** 2 was too large\n        # adjust the search space to be the lower half of the space\n    # Or, if the possible_answer ** 2 was too small\n        # adjust the search space to be the upper half of the space\n    # compute the middle of the new search space and assign that to possible answer\n# assume possible_answer is within the margin of error!\n\n\n\n\n\n\nNote how the start, middle, and end of the search space are used repeatedly"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-4",
    "href": "slides/05-numerical-computation.html#bisection-search-4",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-number-1",
    "href": "slides/05-numerical-computation.html#bisection-search-number-1",
    "title": "Numerical Computation",
    "section": "Bisection Search (number > 1)",
    "text": "Bisection Search (number &gt; 1)\n\n\n# Bisection Search for non-perfect squares\n\ndef squareroot_bs(number: int) -&gt; float:\n  \"\"\"Perform bisection search to find root.\"\"\"\n  epsilon = 0.01 # margin of error, could be a parameter\n  lower_bound = 0\n  upper_bound = number\n  midpoint = (lower_bound+upper_bound)/2\n  while abs(number - midpoint**2) &gt; epsilon:\n    if midpoint**2 &gt; number:\n      upper_bound = midpoint\n    else:\n      lower_bound = midpoint\n    midpoint = (lower_bound+upper_bound)/2\n  return midpoint\n\nprint(squareroot_bs(144.3))\n\n\n\n12.012155914306641\n\n\n\n\n\nthis algorithm does not work for numbers less than 1, try it!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-number-1-1",
    "href": "slides/05-numerical-computation.html#bisection-search-number-1-1",
    "title": "Numerical Computation",
    "section": "Bisection Search (number < 1)",
    "text": "Bisection Search (number &lt; 1)\n\n\n# Bisection Search for non-perfect squares\n\ndef squareroot_bs(number: int) -&gt; float:\n  \"\"\"Perform bisection search to find root.\"\"\"\n  epsilon = 0.01 # margin of error, could be a parameter\n  lower_bound = 0\n  if number &lt; 1:\n    upper_bound = 1\n  else:\n    upper_bound = number\n  midpoint = (lower_bound+upper_bound)/2\n  while abs(number - midpoint**2) &gt; epsilon:\n    if midpoint**2 &gt; number:\n      upper_bound = midpoint\n    else:\n      lower_bound = midpoint\n    midpoint = (lower_bound+upper_bound)/2\n  return midpoint\n\nprint(squareroot_bs(0.5))\n\n\n\n0.703125\n\n\n\n\nWhat changed?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-summary",
    "href": "slides/05-numerical-computation.html#bisection-search-summary",
    "title": "Numerical Computation",
    "section": "Bisection Search Summary",
    "text": "Bisection Search Summary\n\n\nPossible solutions are checked in the middle of a search space\nThe search space quickly gets smaller by eliminating half of the space on every iteration\nThere is no guiding step size"
  },
  {
    "objectID": "slides/05-numerical-computation.html#understanding-the-computer",
    "href": "slides/05-numerical-computation.html#understanding-the-computer",
    "title": "Numerical Computation",
    "section": "Understanding the Computer",
    "text": "Understanding the Computer\n\n\nsimple algorithms like random guessing are usually less efficient\ncomputer can never get the exact answer for non perfect squares\nnumerical strategies often require approximation (like using a margin of error)"
  },
  {
    "objectID": "slides/05-numerical-computation.html#challenge",
    "href": "slides/05-numerical-computation.html#challenge",
    "title": "Numerical Computation",
    "section": "Challenge",
    "text": "Challenge\n\nTry to add code that can count how many times the loops repeat for the various methods of computing a square root.\nWhich algorithm runs with the fewest iterations of the loop?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#end",
    "href": "slides/05-numerical-computation.html#end",
    "title": "Numerical Computation",
    "section": "End",
    "text": "End"
  },
  {
    "objectID": "slides/03-linting.html#goals",
    "href": "slides/03-linting.html#goals",
    "title": "Linting",
    "section": "Goals",
    "text": "Goals\n\nDefine linting\nReview linting errors\nReview linting solutions"
  },
  {
    "objectID": "slides/03-linting.html#linting-definition",
    "href": "slides/03-linting.html#linting-definition",
    "title": "Linting",
    "section": "Linting Definition",
    "text": "Linting Definition\n\nLinting highlights semantic and stylistic problems in your Python source code, which often helps you identify and correct subtle programming errors or coding practices that can lead to errors. For example, linting can detect the use of an undefined variable, calls to undefined functions, missing parentheses, and even more subtle issues such as attempting to redefine built-in types or functions.\n\n\nhttps://code.visualstudio.com/docs/python/linting"
  },
  {
    "objectID": "slides/03-linting.html#stylistic-errors-in-english",
    "href": "slides/03-linting.html#stylistic-errors-in-english",
    "title": "Linting",
    "section": "Stylistic Errors in English",
    "text": "Stylistic Errors in English\nhI , mY nAME    is Emily .   .\n\n\n1:1 The first letter of the first word should be capitalized\n1:2 Inner letters should not be capitalized\n1:3 Found white space before a comma, expected none\n1:7 Inner letters should not be capitalized\n1:10 Inner letters should not be capitalized\n1:13 Found white space before a word, expected one white space\n1:25 Found white space before a period, expected none\n1:29 Found two periods, expected one"
  },
  {
    "objectID": "slides/03-linting.html#stylistic-errors-in-code",
    "href": "slides/03-linting.html#stylistic-errors-in-code",
    "title": "Linting",
    "section": "Stylistic Errors in Code",
    "text": "Stylistic Errors in Code\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruff\ncli/main.py:1:1: D400 First line should end with a period\ncli/main.py:1:1: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:10:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:11:5: D400 First line should end with a period\ncli/main.py:11:5: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:17:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:18:5: D400 First line should end with a period\ncli/main.py:18:5: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:22:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:29:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:33:5: D202 [*] No blank lines allowed after function docstring (found 1)\ncli/main.py:49:15: F541 [*] f-string without any placeholders\ncli/main.py:54:9: E303 [*] Too many blank lines (2)\ncli/main.py:59:9: E303 [*] Too many blank lines (2)\ncli/main.py:64:9: E303 [*] Too many blank lines (2)\ncli/main.py:69:9: E303 [*] Too many blank lines (2)\ncli/main.py:74:9: E303 [*] Too many blank lines (2)\ncli/main.py:82:1: W391 [*] Too many newlines at end of file\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:1:1: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:1:1: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:5:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:6:5: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:6:5: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:12:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:13:5: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:13:5: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:17:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:42:15: F541 [*] f-string without any placeholders\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:51:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:56:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:61:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:66:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:74:1: W391 [*] Too many newlines at end of file\nFound 33 errors.\n[*] 21 fixable with the `--fix` option (12 hidden fixes can be enabled with the `--unsafe-fixes` option)."
  },
  {
    "objectID": "slides/03-linting.html#read-slowly",
    "href": "slides/03-linting.html#read-slowly",
    "title": "Linting",
    "section": "Read Slowly",
    "text": "Read Slowly\ncli/main.py:1:1: D400 First line should end with a period\n\n\ncli/main.py is the file\n1:1 is the line number : character number\nD400 ignore this for now\nFirst line should end with a period message explaining the issue\nSolution:\n\nGo the location indicated\nread your code at and around the area\ntry to fix the issue"
  },
  {
    "objectID": "slides/03-linting.html#fixing",
    "href": "slides/03-linting.html#fixing",
    "title": "Linting",
    "section": "Fixing",
    "text": "Fixing\nOriginal:\n\"\"\"a variety of numerical operations based on the value of an option to the CLI\"\"\"\nCorrected:\n\"\"\"Do a variety of numerical operations based on the value of an option to the CLI.\"\"\""
  },
  {
    "objectID": "slides/03-linting.html#linting-commands",
    "href": "slides/03-linting.html#linting-commands",
    "title": "Linting",
    "section": "Linting Commands",
    "text": "Linting Commands\n\npoetry run task ruff\n\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruff\ncli/main.py:1:1: D400 First line should end with a period\n\npoetry run task ruffdetails\n\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruffdetails\ncli/main.py:1:1: D400 First line should end with a period\n  |\n1 | \"\"\"a variety of numerical operations based on the value of an option to the CLI\"\"\"\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400\n2 | \n3 | # TODO: add at least ten single-line comments to this file to describe individual line of code.\n  |\n  = help: Add period"
  },
  {
    "objectID": "slides/03-linting.html#automatic-fixes",
    "href": "slides/03-linting.html#automatic-fixes",
    "title": "Linting",
    "section": "Automatic fixes",
    "text": "Automatic fixes\n\npoetry run task fix\nor\npoetry run ruff --fix"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "",
    "text": "Class Sessions: MWF 9:00 AM-9:50 AM, Alden 101\nLaboratory Session: Tu, 2:30 PM-4 PM, Alden 101\nInstructor: Professor Emily Graber, egraber@allegheny.edu\nOffice Location: Alden Hall 106\nInstructor Office Hours: Visit Google Calendar to reserve an appointment as needed."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "index.html#course-learning-objectives",
    "href": "index.html#course-learning-objectives",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Materials",
    "text": "Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nCourse Website\nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs\nProactive Programmers\n\n\n\nRequired Software and Accounts\n\nSublime Text 4\nPython 3.12\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nGoogle Account"
  },
  {
    "objectID": "index.html#course-components",
    "href": "index.html#course-components",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Components",
    "text": "Course Components\nThere are five main components that contribute to the grade in this course.\n\nSpecifications Labs: Generally shorter labs to be started in lab session and completed outside of class. Graded pass/fail and falling in the remember, understand, and apply categories of Bloom’s Taxonomy.\nEngineering Labs: Generally longer labs to be started in lab session and completed outside of class. Graded by percentage with rubric and falling in the analyze, evaluate, and create categories of Bloom’s Taxonomy.\nQuizzes: Questions to be answered in person or through forms online or on paper about recently materials, including labs.\nParticipation: Demonstration of effective and collaborative communication in Discord by asking or answering questions weekly. Completion of reading and reading reports.\nAttendance. See section below.\n\n\n\n\nBlooms Taxonomy\n\n\n\nGrading\nThe components described above will be weighted as shown in the table below. Please note that attendance is also required, and attendance policies affect grades. Adjustments to grades will be applied on top of base grades according to policy.\n\n\n\nCategory\nPercentage\n\n\n\n\nQuizzes (14)\n20\n\n\nParticipation\n20\n\n\nSpec Labs (8)\n20\n\n\nEngineering Labs (8)\n40"
  },
  {
    "objectID": "index.html#schedule-at-a-glance",
    "href": "index.html#schedule-at-a-glance",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Jan 13: Software Operations (Guttag Chapter 1)\nWeek Two: Jan 22: Python Foundations (Guttage Chapter 2)\nWeek Three: Jan 27: Numerical Programs (Guttag Chapter 3)\nWeek Four: Feb 3: Function Scope (Guttag Chapter 4)\nWeek Five: Feb 10: Structured Types (Guttag Chapter 5)\nWeek Six: Feb 17: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Feb 24: Recursion (Guttag Chapter 6)\nSpring Break\nWeek Nine: March 10: Modules and Files (Guttag Chapter 7)\nWeek Ten: March 17: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Eleven: March 24: Object-Oriented Programming (Guttag Chapter 10)\nWeek Twelve: March 31: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: April 7: Sorting (Guttag Chapter 12)\nWeek Fourteen: April 14: Data Structures (Guttag Chapter 12 cont)\nWeek Fifteen: April 21: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: April 28: Review\n\n\nFinal\n\nThursday, May 1, 2025 at 9:00 AM (Complete Final Exam Schedule)"
  },
  {
    "objectID": "index.html#assignment-policies",
    "href": "index.html#assignment-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time.\nDue dates will be stated in the Materials and Discord. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\n\n\nAssignment Evaluation\nYou will privately receive a grade for each assignment in Canvas. Your grade will be a function of whether or not you completed the work that correctly fulfills the assignment’s specification and submitted it by the deadline.\nEngineering Labs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Engineering Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nSpec Labs are graded based only on the gatorgrade score. A gatorgrade score of 93% on a given spec lab will result in a grade of 93% for that lab."
  },
  {
    "objectID": "index.html#quiz-policies",
    "href": "index.html#quiz-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Quiz Policies",
    "text": "Quiz Policies\nQuizzes on previously-covered or assigned materials are given in class, typically on the day following lab.\nIn case you are absent on a day when there is a quiz, you can make it up in any instructor office hours slot within one week. Reach out if the office hours time slots do not work for you."
  },
  {
    "objectID": "index.html#discord-policies",
    "href": "index.html#discord-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Discord Policies",
    "text": "Discord Policies\nParticipation through Discord is required. Each student is required to post at least once per week by either asking a real question or answering a question asked by your classmate. Collegial conversations about course topics or activities are also allowed. Weekly usage of Discord is what determines your participation grade."
  },
  {
    "objectID": "index.html#additional-policies",
    "href": "index.html#additional-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have eight absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and eight excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the final exam.\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "index.html#communications",
    "href": "index.html#communications",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "index.html#honor-code",
    "href": "index.html#honor-code",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "index.html#educational-accommodations",
    "href": "index.html#educational-accommodations",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "index.html#syllabus-changes",
    "href": "index.html#syllabus-changes",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  },
  {
    "objectID": "code/20250317_testing_debugging.html",
    "href": "code/20250317_testing_debugging.html",
    "title": "Guttag Chapter 8",
    "section": "",
    "text": "Open In Colab\n\n\n\nGuttag Chapter 8\n\n# Example function within palindromechecker.palindrome\n\n# TODO: what is the module name?\n# TODO: what is the package name?\n# TODO: does the function def within the module rely on any imported objects?\n\ndef pal_rev(word: str) -&gt; bool:\n  \"\"\"Determine if a given word is a palindrome.\"\"\"\n  # TODO: reverse the word\n  # TODO: return whether or not the reversed word is the same as the word\n\n\n# Example function within palindromechecker.palindrome\n\n# TODO: what is the module name?\n# TODO: what is the package name?\n# TODO: does the function def within the module rely on any imported objects?\n\ndef pal_rev(word: str) -&gt; bool:\n  \"\"\"Determine if a given word is a palindrome.\"\"\"\n  return word == word[::-1]\n\n\n# Example function within tests.test_palindrome\n\n# TODO: what is the module name?\n# TODO: what is the package name?\n# TODO: does the function def within the module rely on any imported objects?\n\ndef test_short_not_palindrome_word_reverse():\n    \"\"\"Ensure that a short word of \"taylor\" does not work correctly with reverse.\"\"\"\n    # TODO: hard code the input\n    # TODO: hard code the expected answer\n    # TODO: call the function under test with the hard coded input\n    # TODO: make sure the return value is saved!\n    # TODO: use the assert syntax compare the hard coded expected answer with\n    # the returned answer\n\n\ndef test_short_not_palindrome_word_reverse():\n    \"\"\"Ensure that a short word of \"taylor\" does not work correctly with reverse.\"\"\"\n    test_word = 'taylor' # hard coded\n    expected_result = False # hard coded\n    result = pal_rev(test_word)\n    assert result == expected_result"
  },
  {
    "objectID": "code/20250224_recursion.html",
    "href": "code/20250224_recursion.html",
    "title": "Guttag Chapter 6",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250224_recursion.html#factorial-algorithms",
    "href": "code/20250224_recursion.html#factorial-algorithms",
    "title": "Guttag Chapter 6",
    "section": "Factorial Algorithms",
    "text": "Factorial Algorithms\n\n# TODO: add comments explaining everything below\n\ndef factorial_iter(n: int) -&gt; int:\n  result = 1\n  for i in range(1,n+1,1):\n    result *= i\n  return result\n\n\n# TODO: add comments explaining everything below\n\ndef factorial(n: int) -&gt; int:\n  if n == 1:\n    return 1\n  return n * factorial(n - 1)\n\n\n# TODO: call the functions"
  },
  {
    "objectID": "code/20250224_recursion.html#palindrome-algorithms",
    "href": "code/20250224_recursion.html#palindrome-algorithms",
    "title": "Guttag Chapter 6",
    "section": "Palindrome Algorithms",
    "text": "Palindrome Algorithms\n\n# TODO: add comments explaining everything below\n\ndef pal_rev(w: str) -&gt; bool:\n  w_rev = w[::-1]\n  if w_rev == w:\n    return True\n  return False\n\n\n# TODO: add comments explaining everything below\n\ndef pal_rec(w: str) -&gt; bool:\n  if len(w) &lt;= 1:\n    return True\n  elif w[0] == w[-1]:\n    return pal_rec(w[1:-1])\n  return False\n\n\n# TODO: call the function using upper and lower case letters"
  },
  {
    "objectID": "code/20250224_recursion.html#fibonacci-number-algorithms",
    "href": "code/20250224_recursion.html#fibonacci-number-algorithms",
    "title": "Guttag Chapter 6",
    "section": "Fibonacci Number Algorithms",
    "text": "Fibonacci Number Algorithms\nFibonacci number \\({F_n}\\) is defined: - \\({F_{n}=F_{n-1}+F_{n-2}}\\) where - \\({F_0 = 0}\\) and \\({F_1 = 1}\\) - learn more: https://en.wikipedia.org/wiki/Fibonacci_sequence\n\n# TODO: add comments explaining everything below\n\ndef fib(nth: int) -&gt; int:\n  if nth &lt;= 1:\n    return nth\n  zeroth = 0\n  first = 1\n  for _ in range(2,nth + 1):\n    next = zeroth + first\n    zeroth = first\n    first = next\n  return next\n\n\nfib(15)\n\n\n# TODO: add comments explaining everything below\n\ndef fib_rec(nth: int) -&gt; int:\n  if nth &lt;= 1:\n    return nth\n  else:\n    return fib_rec(nth-1) + fib_rec(nth-2)\n\nfib_rec(15)"
  },
  {
    "objectID": "code/20250224_recursion.html#fibonacci-sequence-algorithms",
    "href": "code/20250224_recursion.html#fibonacci-sequence-algorithms",
    "title": "Guttag Chapter 6",
    "section": "Fibonacci Sequence Algorithms",
    "text": "Fibonacci Sequence Algorithms\n\n# TODO: add comments explaining everything below\n\nfrom typing import List\n\ndef fib(nth: int) -&gt; List[int]:\n  if nth == 0:\n    return [0]\n  if nth == 1:\n    return [0,1]\n  seq = [0,1]\n  for _ in range(2,nth + 1):\n    next = seq[-1] + seq[-2]\n    seq.append(next)\n  return seq\n\nfib(15)\n\n\nfrom typing import Tuple\n\ndef fib(nth: int) -&gt; Tuple[int]:\n  if nth == 0:\n    # TODO: modify previous iterative algorithm to use tuples\n\n  if nth == 1:\n    # TODO: modify previous iterative algorithm to use tuples\n\n  # TODO: modify previous iterative algorithm to use tuples\n\n  for _ in range(2,nth + 1):\n\n    # TODO: modify previous iterative algorithm to use tuples\n\n    # TODO: modify previous iterative algorithm to use tuples\n\n  return seq\n\nfib(15)\n\n\n# TODO: add comments explaining everything below\n\nfrom typing import List\n\ndef fib_rec(nth: int) -&gt; List[int]:\n  if nth == 0:\n    return [0]\n  if nth == 1:\n    return [0,1]\n  seq = fib_rec(nth - 1)\n  seq.append(seq[-1] + seq[-2])\n  return seq\n\nfib_rec(15)\n\n\nfrom typing import Tuple\n\ndef fib_rec(nth: int) -&gt; Tuple[int]:\n  if nth == 0:\n    # TODO: modify previous recursive algorithm to use tuples\n\n  if nth == 1:\n    # TODO: modify previous recursive algorithm to use tuples\n\n  seq = fib_rec(nth - 1)\n\n  # TODO: modify previous recursive algorithm to use tuples\n\n\n  return seq\n\nfib_rec(15)"
  },
  {
    "objectID": "code/20250224_recursion.html#questions",
    "href": "code/20250224_recursion.html#questions",
    "title": "Guttag Chapter 6",
    "section": "Questions",
    "text": "Questions\n\nHow can you tell if an algorithm is iterative?\nHow can you tell if an algorithm is recursive?\nWhat valid inputs cause problems with some algorithms shown above and why?"
  },
  {
    "objectID": "code/20250319_exception_handling.html",
    "href": "code/20250319_exception_handling.html",
    "title": "Exception Handling - Guttag Chapter 9",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250319_exception_handling.html#the-code-below-crashes",
    "href": "code/20250319_exception_handling.html#the-code-below-crashes",
    "title": "Exception Handling - Guttag Chapter 9",
    "section": "The code below crashes",
    "text": "The code below crashes\n\nprint(hello)\n\n\nprint(1+'a')\n\n\nprint(10 = 10)\n\n\nopen(\"non-existant-file.csv\")\n\n\n# check if a is divisible by b\n\ndef is_divisible(a, b) -&gt; bool:\n  \"\"\"Check if a is divisible by b.\"\"\"\n  return a % b == 0\n\n\nprint(is_divisible(0,0))"
  },
  {
    "objectID": "code/20250319_exception_handling.html#the-code-below-runs",
    "href": "code/20250319_exception_handling.html#the-code-below-runs",
    "title": "Exception Handling - Guttag Chapter 9",
    "section": "The code below runs!",
    "text": "The code below runs!\n\ntry:\n  print(hello)\nexcept NameError:\n  print(\"something above is not working correctly, but the code will keep running anyway!\")\n\nsomething above is not working correctly, but the code will keep running anyway!\n\n\n\ntry:\n  print(hello)\nexcept NameError as msg:\n  print(msg)\n\nname 'hello' is not defined"
  },
  {
    "objectID": "code/20250319_exception_handling.html#these-exceptions-are-intentional",
    "href": "code/20250319_exception_handling.html#these-exceptions-are-intentional",
    "title": "Exception Handling - Guttag Chapter 9",
    "section": "These exceptions are intentional",
    "text": "These exceptions are intentional\n\nresult = None\n\nif result is None:\n  raise ValueError\n\n\nresult = None\nassert result is True"
  },
  {
    "objectID": "code/20250319_exception_handling.html#larger-example-of-exception-handling",
    "href": "code/20250319_exception_handling.html#larger-example-of-exception-handling",
    "title": "Exception Handling - Guttag Chapter 9",
    "section": "Larger Example of Exception Handling",
    "text": "Larger Example of Exception Handling\n\n# define a function that computes the ratios of the floats\n# inside of two input lists and then creates an output list\nfrom typing import List\n\ndef get_ratios(one: List, two: List) -&gt; List[float]:\n    ratios = []\n    for index in range(len(one)):\n        try:\n            ratios.append(one[index] / two[index])\n        except ZeroDivisionError:\n            ratios.append(float('nan'))\n        except:\n            raise ValueError(\"Incorrect arguments\")\n    return ratios\n\n\n# run the get_ratios function with exception handling\ntry:\n    print(get_ratios([1, 2, 7, 6], [1, 2, 0, 3]))\n    print(get_ratios([], []))\n    print(get_ratios([1, 2, 7], [1, 2, 10, 3]))\n    print(get_ratios([1, 2, 7, 6], [1, 2, 10]))\nexcept ValueError as message:\n    print(message)\n\n\n# run the get_ratios function without exception handling\nprint(get_ratios([1, 2, 7, 6], [1, 2, 0, 3]))\nprint(get_ratios([], []))\nprint(get_ratios([1, 2, 7], [1, 2, 10, 3]))\nprint(get_ratios([1, 2, 7, 6], [1, 2, 10]))"
  },
  {
    "objectID": "code/20250210_strings_and_slicing.html",
    "href": "code/20250210_strings_and_slicing.html",
    "title": "strings",
    "section": "",
    "text": "Open In Colab\n\n\n\nstrings\n\n# strings contain charaters\na = 'this is a string'\ndigit_string = '1234567890'\nanother_string = '1, 2, 3, 4, 5, 6, 7, 8, 9, 0'\nempty_string = ''\n\n\n# strings are indexable, ordered\na = 'this is a string'\nprint(a[0])\nprint(a[1])\n\n\n# strings are immutable\na = 'this is a string'\na[0] = 'T'\n\n\n# adding creates an entirely new string\na = 'this is a string'\nanother_string = '1, 2, 3, 4, 5, 6, 7, 8, 9, 0'\nnew_string = a + another_string\nprint(new_string)\n\n\n# loops\nanother_string = '1, 2, 3, 4, 5, 6, 7, 8, 9, 0'\n\nfor char in another_string:\n  print(char)\n\n\n\nslicing\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements 0 up to 3rd (not including 3rd)\nprint(a[0:3])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements 0 up to 8th (not including 8th), in step size of 2\nprint(a[0:8:2])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements 5 up to 8th (including 8th)\nprint(a[5:])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements 2 up to 2nd to last (not including 2nd to last)\nprint(a[2:-2])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements from end to 0 (not including 0) backward (step size -1)\nprint(a[:0:-1])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve elements from end to 0 (including 0) backward (step size -1)\nprint(a[::-1])\n\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n# retrieve a string and do further indexing\nprint(a[4][8:-8])\n\n\n\npretty print\n\nfrom typing import Iterable\n\ndef prettyprint(values: Iterable[int]) -&gt; str:\n  return str(values)[1:-1]\n\n\nmy_divisors = [1, 97]\nprint(f\"not pretty divisors are: {my_divisors}\")\nprint(f\"pretty divisors are: {prettyprint(my_divisors)}\")"
  },
  {
    "objectID": "code/20250326_inheritance.html",
    "href": "code/20250326_inheritance.html",
    "title": "Define Classes that Inherit from Vehicle",
    "section": "",
    "text": "Open In Colab\n\n\n\nDefine Classes that Inherit from Vehicle\n\nclass Vehicle():\n  \"\"\"Abstract data type representing a vehicle.\"\"\"\n\n  def __init__(self, num_seats: int, num_doors: int, engine_type: str):\n    \"\"\"Define the constructor.\"\"\"\n    self._seats = num_seats\n    self._doors = num_doors\n    self._engine = engine_type\n    self._mileage = 0.0\n\n  def drive(self, num_miles: float):\n    \"\"\"Add mileage to the vehicle.\"\"\"\n    self._mileage += num_miles\n    return None\n\n  def mileage(self):\n    \"\"\"Get the mileage of the vehicle.\"\"\"\n    return self._mileage\n\n  def __repr__(self):\n    \"\"\"Define the printable representation of the vehicle.\"\"\"\n    return f\"{self._engine} vehicle with {self._seats} seats, \" +\\\n           f\"{self._doors} doors, and {self._mileage} miles.\"\n\n\n# A Bicycle IS A Vehicle\n# (go with me on this)\n\nclass Bicycle(Vehicle):\n  def __init__(self):\n    Vehicle.__init__(self, num_seats=1, num_doors=0, engine_type=\"human\")\n\n  def ride(self, num_miles: float):\n    \"\"\"Add milage to the bike.\"\"\"\n    self._mileage += num_miles\n\n  def __repr__(self):\n    \"\"\"Redefine the printable representation for convenience.\"\"\"\n    return f\"I'm a bike, my engine is a {self._engine}.... but also {Vehicle.__repr__(self)}\"\n\n\n# A Car IS A Vehicle\n\n# TODO: Make a car class that inherits from Vehicle\n# TODO: add attributes of make and model to the constructor\n\n\n# TODO: Can you think of something that could inherit from Bicycle?\n\n\n\nMake Objects and Use Methods\n\nvehicle = Vehicle(6,4,\"steam\")\nvehicle.drive(300)\nprint(vehicle)\n\nsteam vehicle with 6 seats, 4 doors, and 300.0 miles.\n\n\n\n# TODO: make a bike\n# TODO: ride the bike\n# TODO: get the text representation of the bike\n\n# TODO: what happens if you try to drive the bike and print again?\n\n\n# TODO: make a car\n# TODO: drive the car\n# TODO: get the text representation of the car\n\n# TODO: what happens if you try to ride the car and print again?\n\n\n\nUse getattr\n\n# getattr looks up an attribute by using a string instead of dot notation.\n# it turns a string into code!!!!!\n\nmileage_attribute_handle = getattr(vehicle, \"mileage\")\nprint(\"about to print the mileage attribute handle\")\nprint(\"\\t\", mileage_attribute_handle)\nprint(\"about to call the mileage attribute handle\")\nresult = mileage_attribute_handle()\nprint(\"about to print result\")\nprint(\"\\t\", result)\n\n\n\nImplement a bespoke version of getattr\n\ndef my_getattr(object: Vehicle, string: str):\n    if string == \"mileage\":\n        return object.mileage\n    else:\n        return \"your string is either not an attribute, or the attribute is private!\"\n\n\n# call the bespoke version with a valid input\n\nbespoke_mileage_attribute_handle = my_getattr(vehicle, \"mileage\")\nprint(\"about to print the bespoke mileage attribute handle\")\nprint(\"\\t\", bespoke_mileage_attribute_handle)\nprint(\"about to call the bespoke mileage attribute handle\")\nresult = bespoke_mileage_attribute_handle()\nprint(\"about to print result\")\nprint(\"\\t\", result)\n\n\n# TODO: call the bespoke version with an invalid input"
  },
  {
    "objectID": "code/20250326_object_processing.html",
    "href": "code/20250326_object_processing.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250326_object_processing.html#definitions",
    "href": "code/20250326_object_processing.html#definitions",
    "title": "Data Structures",
    "section": "Definitions",
    "text": "Definitions\n\n# define a person class\n\nfrom typing import List\n\nclass Person:\n    \"\"\"Define a Person class.\"\"\"\n\n    def __init__(self, name: str, residence: str, cell: str, profession: str, email: str) -&gt; None:\n        \"\"\"Define the constructor for a person.\"\"\"\n        self.name = name\n        self.residence = residence\n        self.cell = cell\n        self.profession = profession\n        self.email = email\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Define human-readable representation of the person.\"\"\"\n        return f\"{self.name} is a {self.profession} who lives in {self.residence}. You can call this person at {self.cell} and email them at {self.email}\"\n\n    def create_list(self) -&gt; List[str]:\n        \"\"\"Create a list of strings representing the person.\"\"\"\n        details = []\n        details.append(self.name)\n        details.append(self.residence)\n        details.append(self.cell)\n        details.append(self.profession)\n        details.append(self.email)\n        return details\n\n\n# define other useful functions\n\ndef find_matching_people(attribute: str, search_term: str, list_of_persons: List[Person]) -&gt; List[Person]:\n    \"\"\"Collect all matching persons into a new list.\"\"\"\n    list_of_matching_persons = []\n    for current_person in list_of_persons:\n      if search_term in getattr(current_person, attribute): # https://docs.python.org/3/library/functions.html#getattr\n            list_of_matching_persons.append(current_person)\n    return list_of_matching_persons\n\n\ndef create_display_text(list_of_persons: List[Person]) -&gt; str:\n    \"\"\"Convert list of persons into a string with pretty formatting.\"\"\"\n    display_text = \"\"\n    for current_person in list_of_persons:\n      display_text += \"- \" + str(current_person) + \"\\n\"\n    return display_text"
  },
  {
    "objectID": "code/20250326_object_processing.html#usage",
    "href": "code/20250326_object_processing.html#usage",
    "title": "Data Structures",
    "section": "Usage",
    "text": "Usage\n\n# create instances of the person class\np1 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Musician\", \"egraber@allegheny.edu\")\np2 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Student\", \"egraber@allegheny.edu\")\np3 = Person(\"Emily Graber\", \"France\", \"0123456789\", \"Student\", \"egraber@allegheny.edu\")\np4 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Musician\", \"allegheny@allegheny.edu\")\n\n\n# TODO: create as least 1 additional instance of the Person class of a classmate you do not yet know\n\n\n# TODO: print out a person and identify which part of the class was responsible for the printout\n\n\n# TODO: create the list version of a single person using the create_list method and display your results\n\n\n# TODO: compare the printouts from the two previous cells; why are they different?\n\n\n# Combine all the people into one large list\nlist_of_person_objects = [p1,p2,p3,p4]\nprint(list_of_person_objects)\n\n\n# TODO: define variables and write a call to the function `find_matching_people`, and print out the results\n\n\n# Call create_display_text, then print the results\ndisplay_text = create_display_text(list_of_person_objects)\nprint(display_text)\n\n\n# TODO: what are the differences between the printout of the return value of `find_matching_people` and `display_text`?\n# TODO: what code is called by `str` in `str(current_person)`?"
  },
  {
    "objectID": "code/20250409_sorting.html",
    "href": "code/20250409_sorting.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250409_sorting.html#built-in-sorting-functions",
    "href": "code/20250409_sorting.html#built-in-sorting-functions",
    "title": "Data Structures",
    "section": "Built-in sorting functions",
    "text": "Built-in sorting functions\n\nimport random\n\n# make a list filled with random ints, hopfully not in order :)\nli = [random.randint(0,10) for _ in range(10)]\n\n# make a copy (shallow and deep both work because this is a list of ints)\nli_copy = li.copy()\n\n# print everything before sorting\nprint(\"BEFORE SORTING\")\nprint(li, \"&lt;--li\", )\nprint(li_copy, \"&lt;--li_copy\")\n\n# sort in two ways\nli_sorted = li.sort()\nli_copy_sorted = sorted(li_copy)\n\n# print everything after sorting\nprint(\"AFTER SORTING\")\nprint(li, \"&lt;--li\", )\nprint(li_sorted, \"&lt;--li\", )\nprint(li_copy, \"&lt;--li_copy\")\nprint(li_copy_sorted, \"&lt;--li_copy_sorted\")\n\n# Questions\n# What happens to li and why?\n# What happens to li_copy and why?\n# What is the difference between list.sort() and sorted()?"
  },
  {
    "objectID": "code/20250409_sorting.html#selection-sort",
    "href": "code/20250409_sorting.html#selection-sort",
    "title": "Data Structures",
    "section": "Selection Sort",
    "text": "Selection Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef select_sort(array: List[int]) -&gt; None:\n  \"\"\"Find smallest elem and build up sorted prefix, operating directly on the array.\"\"\"\n\n\nfrom typing import List\n\ndef select_sort(array: List[int]) -&gt; None:\n  \"\"\"Find smallest elem and build up sorted prefix.\"\"\"\n\n  # create a variable that stores the length of the prefix\n  len_prefix = 0\n  # do sorting while the len_prefix is not the entire array length\n  while len_prefix != len(array):\n    for i in range(len_prefix, len(array)):\n      smallest = array[len_prefix]\n      if array[i] &lt; smallest:\n        smallest = array[i]\n        # preemptively move the smallest elem so far into position\n        temp = smallest\n        smallest = array[i]\n        array[i] = temp\n    len_prefix += 1\n\narray = [10, 101, 100, 1, 5, 3, 8, 2, 0]\nselect_sort(array)\nprint(array)\n\n# Questions\n# Why is a range used from len_prefix to len(array)?\n# If the preemptive move did not occur, what would have to happen instead?\n# Fill in comments for the code"
  },
  {
    "objectID": "code/20250409_sorting.html#bubble-sort",
    "href": "code/20250409_sorting.html#bubble-sort",
    "title": "Data Structures",
    "section": "Bubble Sort",
    "text": "Bubble Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef bubble_sort(array: List[int]) -&gt; None:\n  \"\"\"Bubble up the largest elem to the suffix, operating directly on the array.\"\"\"\n\n\nfrom typing import List\n\ndef bubble_sort(array: List[int]) -&gt; None:\n  \"\"\"Bubble up the largest elem to the suffix.\"\"\"\n\n  bubbling_needed = True\n  while bubbling_needed:\n    bubbling_needed = False\n    for i in range(len(array) - 1):\n      if array[i+1] &lt; array[i]:\n        bubbling_needed = True\n        temp = array[i]\n        array[i] = array[i+1]\n        array[i+1] = temp\n\narray = [10, 101, 100, 1, 5, 3, 8, 2, 0]\nbubble_sort(array)\nprint(array)\n\n# Question\n# Why is the suffix location not explicitly stored?"
  },
  {
    "objectID": "code/20250409_sorting.html#insert-sort",
    "href": "code/20250409_sorting.html#insert-sort",
    "title": "Data Structures",
    "section": "Insert Sort",
    "text": "Insert Sort\n\n# TODO: try it yourself, then look below to check your answer\n\ndef insert_sort(array: list[int]) -&gt; None:\n  \"\"\"Insert each element one at a time into the sorted prefix, operating on the array in place.\"\"\"\n\n\ndef insert_sort(array: list[int]) -&gt; None:\n  \"\"\"Insert each element one at a time into the sorted prefix, operating on the array in place.\"\"\"\n  for i in range(1,len(array)):\n    cur_elem = array[i]\n    j = i-1\n    while j &gt;= 0:\n      if cur_elem &gt;= array[j]:\n        break\n      if cur_elem &lt; array[j]:\n        array[j + 1] = array[j]\n        array[j] = cur_elem\n        j -= 1\n\narray = [-10, -100, 100, 1, 5, 3, 8, 2, -1]\nprint(f'array is: {array}')\n\nreturn_value = insert_sort(array)\nprint(f'array is: {array}')\nprint(f'return_value is: {return_value}')\n\n# Question\n# Why is the index j used?"
  },
  {
    "objectID": "code/20250409_sorting.html#merge-sort",
    "href": "code/20250409_sorting.html#merge-sort",
    "title": "Data Structures",
    "section": "Merge Sort",
    "text": "Merge Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef merge(a: List[int], b: List[int]) -&gt; list[int]:\n  \"\"\"Merge two sorted lists.\"\"\"\n\ndef merge_sort(array: list[int]) -&gt; list[int]:\n    \"\"\"Sort the provided list recursively.\"\"\"\n    # Base case is reaching a sorted list of length 0 or 1, which are always sorted.\n    # Recursively call merge_sort inside of merge, making the assumption that eventually,\n    # the array will be split into trivially sorted chunks\n    # The recursive calls must use inputs that are the first or second half of the list,\n    # which will be used in further splitting.\n\n\nfrom typing import List\n\ndef merge(a: List[int], b: List[int]) -&gt; list[int]:\n  \"\"\"Merge two sorted lists.\"\"\"\n\n  merged = []\n  idx_a, idx_b = 0, 0\n\n  while idx_a != len(a) and idx_b != len(b):\n    if a[idx_a] &lt;= b[idx_b]:\n      merged.append(a[idx_a])\n      idx_a += 1\n    else:\n      merged.append(b[idx_b])\n      idx_b += 1\n\n  if idx_a == len(a):\n    merged += b[idx_b:]\n  if idx_b == len(b):\n    merged += a[idx_a:]\n\n  return merged\n\n# Questions\n# What is idx_a and idx_b tracking?\n\narray1 = [1,4,6,8,10,11]\narray2 = [2,3,4,7,9,10]\nprint(f'array1 is: {array1} and array2 is: {array2}')\n\nreturn_value = merge(array1, array2)\nprint(f'array1 is: {array1} and array2 is: {array2}')\nprint(f'return_value is: {return_value}')\n\n\ndef merge_sort(array: list[int]) -&gt; list[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    # If the input array contains fewer than two elements,\n    # then return it as the result of the function\n    if len(array) &lt; 2:\n        return array\n    midpoint = len(array) // 2\n    # Sort the array by recursively splitting the input\n    # into two equal halves, sorting each half and merging them\n    # together into the final result\n    return merge(a=merge_sort(array[:midpoint]), b=merge_sort(array[midpoint:]))\n\ninput_list = [56, 3, 5, 9, 0, -10, 5, 77, 9, 101]\nsorted_list = merge_sort(input_list)\nprint(f\"Contents of the input list: {input_list}\")\nprint(f\"Contents of the sorted list: {sorted_list}\")\n\n# Questions\n# Is there anything here that could be adding computational complexity (i.e. time) to the algorithm?"
  },
  {
    "objectID": "syll/syllabus.html",
    "href": "syll/syllabus.html",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "",
    "text": "Class Sessions: MWF 9:00 AM-9:50 AM, Alden 101\nLaboratory Session: Tu, 2:30 PM-4 PM, Alden 101\nInstructor: Professor Emily Graber, egraber@allegheny.edu\nOffice Location: Alden Hall 106\nInstructor Office Hours: Visit Google Calendar to reserve an appointment as needed."
  },
  {
    "objectID": "syll/syllabus.html#course-description",
    "href": "syll/syllabus.html#course-description",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "syll/syllabus.html#course-learning-objectives",
    "href": "syll/syllabus.html#course-learning-objectives",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "syll/syllabus.html#materials",
    "href": "syll/syllabus.html#materials",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Materials",
    "text": "Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nCourse Website\nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs\nProactive Programmers\n\n\n\nRequired Software and Accounts\n\nSublime Text 4\nPython 3.12\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nGoogle Account"
  },
  {
    "objectID": "syll/syllabus.html#course-components",
    "href": "syll/syllabus.html#course-components",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Components",
    "text": "Course Components\nThere are five main components that contribute to the grade in this course.\n\nSpecifications Labs: Generally shorter labs to be started in lab session and completed outside of class. Graded pass/fail and falling in the remember, understand, and apply categories of Bloom’s Taxonomy.\nEngineering Labs: Generally longer labs to be started in lab session and completed outside of class. Graded by percentage with rubric and falling in the analyze, evaluate, and create categories of Bloom’s Taxonomy.\nQuizzes: Questions to be answered in person or through forms online or on paper about recently materials, including labs.\nParticipation: Demonstration of effective and collaborative communication in Discord by asking or answering questions weekly. Completion of reading and reading reports.\nAttendance. See section below.\n\n\n\n\nBlooms Taxonomy\n\n\n\nGrading\nThe components described above will be weighted as shown in the table below. Please note that attendance is also required, and attendance policies affect grades. Adjustments to grades will be applied on top of base grades according to policy.\n\n\n\nCategory\nPercentage\n\n\n\n\nQuizzes (14)\n20\n\n\nParticipation\n20\n\n\nSpec Labs (8)\n20\n\n\nEngineering Labs (8)\n40"
  },
  {
    "objectID": "syll/syllabus.html#schedule-at-a-glance",
    "href": "syll/syllabus.html#schedule-at-a-glance",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Jan 13: Software Operations (Guttag Chapter 1)\nWeek Two: Jan 22: Python Foundations (Guttage Chapter 2)\nWeek Three: Jan 27: Numerical Programs (Guttag Chapter 3)\nWeek Four: Feb 3: Function Scope (Guttag Chapter 4)\nWeek Five: Feb 10: Structured Types (Guttag Chapter 5)\nWeek Six: Feb 17: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Feb 24: Recursion (Guttag Chapter 6)\nSpring Break\nWeek Nine: March 10: Modules and Files (Guttag Chapter 7)\nWeek Ten: March 17: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Eleven: March 24: Object-Oriented Programming (Guttag Chapter 10)\nWeek Twelve: March 31: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: April 7: Sorting (Guttag Chapter 12)\nWeek Fourteen: April 14: Data Structures (Guttag Chapter 12 cont)\nWeek Fifteen: April 21: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: April 28: Review\n\n\nFinal\n\nThursday, May 1, 2025 at 9:00 AM (Complete Final Exam Schedule)"
  },
  {
    "objectID": "syll/syllabus.html#assignment-policies",
    "href": "syll/syllabus.html#assignment-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time.\nDue dates will be stated in the Materials and Discord. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\n\n\nAssignment Evaluation\nYou will privately receive a grade for each assignment in Canvas. Your grade will be a function of whether or not you completed the work that correctly fulfills the assignment’s specification and submitted it by the deadline.\nEngineering Labs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Engineering Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nSpec Labs are graded based only on the gatorgrade score. A gatorgrade score of 93% on a given spec lab will result in a grade of 93% for that lab."
  },
  {
    "objectID": "syll/syllabus.html#quiz-policies",
    "href": "syll/syllabus.html#quiz-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Quiz Policies",
    "text": "Quiz Policies\nQuizzes on previously-covered or assigned materials are given in class, typically on the day following lab.\nIn case you are absent on a day when there is a quiz, you can make it up in any instructor office hours slot within one week. Reach out if the office hours time slots do not work for you."
  },
  {
    "objectID": "syll/syllabus.html#discord-policies",
    "href": "syll/syllabus.html#discord-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Discord Policies",
    "text": "Discord Policies\nParticipation through Discord is required. Each student is required to post at least once per week by either asking a real question or answering a question asked by your classmate. Collegial conversations about course topics or activities are also allowed. Weekly usage of Discord is what determines your participation grade."
  },
  {
    "objectID": "syll/syllabus.html#additional-policies",
    "href": "syll/syllabus.html#additional-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have eight absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and eight excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the final exam.\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "syll/syllabus.html#communications",
    "href": "syll/syllabus.html#communications",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "syll/syllabus.html#honor-code",
    "href": "syll/syllabus.html#honor-code",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "syll/syllabus.html#educational-accommodations",
    "href": "syll/syllabus.html#educational-accommodations",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "syll/syllabus.html#syllabus-changes",
    "href": "syll/syllabus.html#syllabus-changes",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  },
  {
    "objectID": "pyodide.html#factorial-algorithms",
    "href": "pyodide.html#factorial-algorithms",
    "title": "Pyodide",
    "section": "Factorial Algorithms",
    "text": "Factorial Algorithms\n\n# TODO: add comments explaining everything below\n\ndef factorial_iter(n: int) -&gt; int:\n  result = 1\n  for i in range(1,n+1,1):\n    result *= i\n  return result\n\n\n# TODO: add comments explaining everything below\n\ndef factorial(n: int) -&gt; int:\n  if n == 1:\n    return 1\n  return n * factorial(n - 1)\n\n\n# TODO: call the functions"
  },
  {
    "objectID": "pyodide.html#palindrome-algorithms",
    "href": "pyodide.html#palindrome-algorithms",
    "title": "Pyodide",
    "section": "Palindrome Algorithms",
    "text": "Palindrome Algorithms\n\n# TODO: add comments explaining everything below\n\ndef pal_rev(w: str) -&gt; bool:\n  w_rev = w[::-1]\n  if w_rev == w:\n    return True\n  return False\n\n\n# TODO: add comments explaining everything below\n\ndef pal_rec(w: str) -&gt; bool:\n  if len(w) &lt;= 1:\n    return True\n  elif w[0] == w[-1]:\n    return pal_rec(w[1:-1])\n  return False\n\n\n# TODO: call the function using upper and lower case letters"
  },
  {
    "objectID": "pyodide.html#fibonacci-number-algorithms",
    "href": "pyodide.html#fibonacci-number-algorithms",
    "title": "Pyodide",
    "section": "Fibonacci Number Algorithms",
    "text": "Fibonacci Number Algorithms\nFibonacci number \\({F_n}\\) is defined: - \\({F_{n}=F_{n-1}+F_{n-2}}\\) where - \\({F_0 = 0}\\) and \\({F_1 = 1}\\) - learn more: https://en.wikipedia.org/wiki/Fibonacci_sequence\n\n# TODO: add comments explaining everything below\n\ndef fib(nth: int) -&gt; int:\n  if nth &lt;= 1:\n    return nth\n  zeroth = 0\n  first = 1\n  for _ in range(2,nth + 1):\n    next = zeroth + first\n    zeroth = first\n    first = next\n  return next\n\n\nfib(15)\n\n\n# TODO: add comments explaining everything below\n\ndef fib_rec(nth: int) -&gt; int:\n  if nth &lt;= 1:\n    return nth\n  else:\n    return fib_rec(nth-1) + fib_rec(nth-2)\n\nfib_rec(15)"
  },
  {
    "objectID": "pyodide.html#fibonacci-sequence-algorithms",
    "href": "pyodide.html#fibonacci-sequence-algorithms",
    "title": "Pyodide",
    "section": "Fibonacci Sequence Algorithms",
    "text": "Fibonacci Sequence Algorithms\n\n# TODO: add comments explaining everything below\n\nfrom typing import List\n\ndef fib(nth: int) -&gt; List[int]:\n  if nth == 0:\n    return [0]\n  if nth == 1:\n    return [0,1]\n  seq = [0,1]\n  for _ in range(2,nth + 1):\n    next = seq[-1] + seq[-2]\n    seq.append(next)\n  return seq\n\nfib(15)\n\n\nfrom typing import Tuple\n\ndef fib(nth: int) -&gt; Tuple[int]:\n  if nth == 0:\n    # TODO: modify previous iterative algorithm to use tuples\n\n  if nth == 1:\n    # TODO: modify previous iterative algorithm to use tuples\n\n  # TODO: modify previous iterative algorithm to use tuples\n\n  for _ in range(2,nth + 1):\n\n    # TODO: modify previous iterative algorithm to use tuples\n\n    # TODO: modify previous iterative algorithm to use tuples\n\n  return seq\n\nfib(15)\n\n\n# TODO: add comments explaining everything below\n\nfrom typing import List\n\ndef fib_rec(nth: int) -&gt; List[int]:\n  if nth == 0:\n    return [0]\n  if nth == 1:\n    return [0,1]\n  seq = fib_rec(nth - 1)\n  seq.append(seq[-1] + seq[-2])\n  return seq\n\nfib_rec(15)\n\n\nfrom typing import Tuple\n\ndef fib_rec(nth: int) -&gt; Tuple[int]:\n  if nth == 0:\n    # TODO: modify previous recursive algorithm to use tuples\n\n  if nth == 1:\n    # TODO: modify previous recursive algorithm to use tuples\n\n  seq = fib_rec(nth - 1)\n\n  # TODO: modify previous recursive algorithm to use tuples\n\n\n  return seq\n\nfib_rec(15)"
  },
  {
    "objectID": "pyodide.html#questions",
    "href": "pyodide.html#questions",
    "title": "Pyodide",
    "section": "Questions",
    "text": "Questions\n\nHow can you tell if an algorithm is iterative?\nHow can you tell if an algorithm is recursive?\nWhat valid inputs cause problems with some algorithms shown above and why?"
  },
  {
    "objectID": "pyodide.html#the-code-below-crashes",
    "href": "pyodide.html#the-code-below-crashes",
    "title": "Pyodide",
    "section": "The code below crashes",
    "text": "The code below crashes\n\nprint(hello)\n\n\nprint(1+'a')\n\n\nprint(10 = 10)\n\n\nopen(\"non-existant-file.csv\")\n\n\n# check if a is divisible by b\n\ndef is_divisible(a, b) -&gt; bool:\n  \"\"\"Check if a is divisible by b.\"\"\"\n  return a % b == 0\n\n\nprint(is_divisible(0,0))"
  },
  {
    "objectID": "pyodide.html#the-code-below-runs",
    "href": "pyodide.html#the-code-below-runs",
    "title": "Pyodide",
    "section": "The code below runs!",
    "text": "The code below runs!\n\ntry:\n  print(hello)\nexcept NameError:\n  print(\"something above is not working correctly, but the code will keep running anyway!\")\n\nsomething above is not working correctly, but the code will keep running anyway!\n\n\n\ntry:\n  print(hello)\nexcept NameError as msg:\n  print(msg)\n\nname 'hello' is not defined"
  },
  {
    "objectID": "pyodide.html#these-exceptions-are-intentional",
    "href": "pyodide.html#these-exceptions-are-intentional",
    "title": "Pyodide",
    "section": "These exceptions are intentional",
    "text": "These exceptions are intentional\n\nresult = None\n\nif result is None:\n  raise ValueError\n\n\nresult = None\nassert result is True"
  },
  {
    "objectID": "pyodide.html#larger-example-of-exception-handling",
    "href": "pyodide.html#larger-example-of-exception-handling",
    "title": "Pyodide",
    "section": "Larger Example of Exception Handling",
    "text": "Larger Example of Exception Handling\n\n# define a function that computes the ratios of the floats\n# inside of two input lists and then creates an output list\nfrom typing import List\n\ndef get_ratios(one: List, two: List) -&gt; List[float]:\n    ratios = []\n    for index in range(len(one)):\n        try:\n            ratios.append(one[index] / two[index])\n        except ZeroDivisionError:\n            ratios.append(float('nan'))\n        except:\n            raise ValueError(\"Incorrect arguments\")\n    return ratios\n\n\n# run the get_ratios function with exception handling\ntry:\n    print(get_ratios([1, 2, 7, 6], [1, 2, 0, 3]))\n    print(get_ratios([], []))\n    print(get_ratios([1, 2, 7], [1, 2, 10, 3]))\n    print(get_ratios([1, 2, 7, 6], [1, 2, 10]))\nexcept ValueError as message:\n    print(message)\n\n\n# run the get_ratios function without exception handling\nprint(get_ratios([1, 2, 7, 6], [1, 2, 0, 3]))\nprint(get_ratios([], []))\nprint(get_ratios([1, 2, 7], [1, 2, 10, 3]))\nprint(get_ratios([1, 2, 7, 6], [1, 2, 10]))"
  },
  {
    "objectID": "pyodide.html#a-vehicle-class",
    "href": "pyodide.html#a-vehicle-class",
    "title": "Pyodide",
    "section": "A Vehicle Class",
    "text": "A Vehicle Class\n\n# Please examine and run and edit the code below to answer these questions:\n\n# What is the syntax used to instatiate a Vehicle?\n# Which dunder method is responsible for allowing the print statement to work?\n# What happens if you remove that method?\n# Does the Vehicle class have any publically accessible attributes?\n# How can you tell?\n# Does the Vehicle class have any publically accessible methods?\n# How can you tell?\n# What happens if you try to check if two vehicles are equal?\n# Add a dunder method to make it possible to check for equality.\n\n\nclass Vehicle():\n  \"\"\"Abstract data type representing a vehicle.\"\"\"\n\n  def __init__(self, num_seats: int, num_doors: int, engine_type: str):\n    \"\"\"Define the constructor.\"\"\"\n    self._seats = num_seats\n    self._doors = num_doors\n    self._engine = engine_type\n    self._mileage = 0.0\n\n  def drive(self, num_miles: float):\n    \"\"\"Add mileage to the vehicle.\"\"\"\n    self._mileage += num_miles\n    return None\n\n  def mileage(self):\n    \"\"\"Get the milage of the vehicle.\"\"\"\n    return self._mileage\n\n  def __repr__(self):\n    \"\"\"Define the printable representation of the vehicle.\"\"\"\n    return f\"{self._engine} vehicle with {self._seats} seats, \" +\\\n           f\"{self._doors} doors, and {self._mileage} miles.\"\n\n\n# Instantiate a vehicle with the constructor\nnew_sports_car = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\n\nprint(new_sports_car)\ntype(new_sports_car)\n\n\n\n# Use a vehicle method to drive the car\ndistance = 1000\nnew_sports_car.drive(distance)\n\nprint(new_sports_car)\n\n\n# Instantiate two vehicles and check if they are equal\n\nnew_sports_car1 = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\nnew_sports_car2 = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\nprint(\"testing if new_sports_car1 == new_sports_car2:\", new_sports_car1 == new_sports_car2)"
  },
  {
    "objectID": "pyodide.html#definitions",
    "href": "pyodide.html#definitions",
    "title": "Pyodide",
    "section": "Definitions",
    "text": "Definitions\n\n# define a person class\n\nfrom typing import List\n\nclass Person:\n    \"\"\"Define a Person class.\"\"\"\n\n    def __init__(self, name: str, residence: str, cell: str, profession: str, email: str) -&gt; None:\n        \"\"\"Define the constructor for a person.\"\"\"\n        self.name = name\n        self.residence = residence\n        self.cell = cell\n        self.profession = profession\n        self.email = email\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Define human-readable representation of the person.\"\"\"\n        return f\"{self.name} is a {self.profession} who lives in {self.residence}. You can call this person at {self.cell} and email them at {self.email}\"\n\n    def create_list(self) -&gt; List[str]:\n        \"\"\"Create a list of strings representing the person.\"\"\"\n        details = []\n        details.append(self.name)\n        details.append(self.residence)\n        details.append(self.cell)\n        details.append(self.profession)\n        details.append(self.email)\n        return details\n\n\n# define other useful functions\n\ndef find_matching_people(attribute: str, search_term: str, list_of_persons: List[Person]) -&gt; List[Person]:\n    \"\"\"Collect all matching persons into a new list.\"\"\"\n    list_of_matching_persons = []\n    for current_person in list_of_persons:\n      if search_term in getattr(current_person, attribute): # https://docs.python.org/3/library/functions.html#getattr\n            list_of_matching_persons.append(current_person)\n    return list_of_matching_persons\n\n\ndef create_display_text(list_of_persons: List[Person]) -&gt; str:\n    \"\"\"Convert list of persons into a string with pretty formatting.\"\"\"\n    display_text = \"\"\n    for current_person in list_of_persons:\n      display_text += \"- \" + str(current_person) + \"\\n\"\n    return display_text"
  },
  {
    "objectID": "pyodide.html#usage",
    "href": "pyodide.html#usage",
    "title": "Pyodide",
    "section": "Usage",
    "text": "Usage\n\n# create instances of the person class\np1 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Musician\", \"egraber@allegheny.edu\")\np2 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Student\", \"egraber@allegheny.edu\")\np3 = Person(\"Emily Graber\", \"France\", \"0123456789\", \"Student\", \"egraber@allegheny.edu\")\np4 = Person(\"Emily Graber\", \"USA\", \"0123456789\", \"Musician\", \"allegheny@allegheny.edu\")\n\n\n# TODO: create as least 1 additional instance of the Person class of a classmate you do not yet know\n\n\n# TODO: print out a person and identify which part of the class was responsible for the printout\n\n\n# TODO: create the list version of a single person using the create_list method and display your results\n\n\n# TODO: compare the printouts from the two previous cells; why are they different?\n\n\n# Combine all the people into one large list\nlist_of_person_objects = [p1,p2,p3,p4]\nprint(list_of_person_objects)\n\n\n# TODO: define variables and write a call to the function `find_matching_people`, and print out the results\n\n\n# Call create_display_text, then print the results\ndisplay_text = create_display_text(list_of_person_objects)\nprint(display_text)\n\n\n# TODO: what are the differences between the printout of the return value of `find_matching_people` and `display_text`?\n# TODO: what code is called by `str` in `str(current_person)`?"
  },
  {
    "objectID": "pyodide.html#worst-case-complexity",
    "href": "pyodide.html#worst-case-complexity",
    "title": "Pyodide",
    "section": "Worst Case Complexity",
    "text": "Worst Case Complexity\n\nimport random\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n\nprint(counter)\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n  if array[i] &gt; 50:\n    break\n\nprint(counter)\nprint(array[:20])\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n  if array[i] &gt; 100:\n    break\n\nprint(counter)\nprint(array[:20])"
  },
  {
    "objectID": "pyodide.html#empirical-analysis",
    "href": "pyodide.html#empirical-analysis",
    "title": "Pyodide",
    "section": "Empirical Analysis",
    "text": "Empirical Analysis\n\n### Containment Lab\n\n# Perform timing experiments using the timeit package\n\n# NOTE: these experiments are not rigorous doubling\n# experiments but rather small-scale experiments that\n# illustrate how the timing package works in Python\n\n# Refer to the documentation of timeit for more details:\n# https://docs.python.org/3/library/timeit.html\n\n# import the timeit package used to collect\n# performance data about the function's execution\nimport timeit\n\n# define the function to analyze in a string\n# so that it can be passed to the timeit function\ncode_to_time = \"\"\"def factorial(n: int) -&gt; int:\n    answer = 1\n    while n &gt; 1:\n        answer *= n\n        n -= 1\n    return answer\n\nfactorial(100)\"\"\"\n\n# repeatedly run the code_to_time and\n# report the performance results; this\n# runs a total of three benchmarking campaigns\n# that will individually run the code a\n# total of 10000 times. It then reports\n# the total execution time for each campaign\nprint (timeit.repeat(stmt = code_to_time,\n                     repeat = 3,\n                     number = 10000))\n\n\n### alternate method\n\ndef factorial(n) -&gt; int:\n  answer = 1\n  while n &gt;= 1:\n    answer *= n\n    n -= 1\n  return answer\n\n%timeit -n 10000 -r 3 factorial(100)\n\n\n# Questions and TODOs\n\n# If the total time is reported for each run, how can the average time be found?\n# TODO: write an algorithm to compute the average time it took for each repetion within a run\n# TODO: write an algorithm to compute the average time it took for a single repeition"
  },
  {
    "objectID": "pyodide.html#doubling-experiment",
    "href": "pyodide.html#doubling-experiment",
    "title": "Pyodide",
    "section": "Doubling Experiment",
    "text": "Doubling Experiment\n\n# TODO: Using one of the methods shown above, run a doubling experiment on this code\n# Start by making a random list of length input_size, then pass actual parameters to the function\n# Record relevant results into the Markdown table\n# Repeat above with doubled input serval times\n\n\nfrom typing import List\n\ndef function(array: List[int], n: int) -&gt; int:\n  counter = 0\n  for i in range(n):\n    array[i] += 1\n    for j in range(n):\n      array[j] += 1\n      for k in range(n):\n        array[k] += 1\n        counter += 1\n  return counter\n\n\ninput_size = 50\n\n\ninput_size = 100\n\n\ninput_size = 200\n\n\ninput_size = 400\n\n\n\n\ninput size\nduration\n\n\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\n\nDoubling ratios - row2:row1 =&gt; - row3:row2 =&gt; - row4:row3 =&gt;"
  },
  {
    "objectID": "pyodide.html#built-in-sorting-functions",
    "href": "pyodide.html#built-in-sorting-functions",
    "title": "Pyodide",
    "section": "Built-in sorting functions",
    "text": "Built-in sorting functions\n\nimport random\n\n# make a list filled with random ints, hopfully not in order :)\nli = [random.randint(0,10) for _ in range(10)]\n\n# make a copy (shallow and deep both work because this is a list of ints)\nli_copy = li.copy()\n\n# print everything before sorting\nprint(\"BEFORE SORTING\")\nprint(li, \"&lt;--li\", )\nprint(li_copy, \"&lt;--li_copy\")\n\n# sort in two ways\nli_sorted = li.sort()\nli_copy_sorted = sorted(li_copy)\n\n# print everything after sorting\nprint(\"AFTER SORTING\")\nprint(li, \"&lt;--li\", )\nprint(li_sorted, \"&lt;--li\", )\nprint(li_copy, \"&lt;--li_copy\")\nprint(li_copy_sorted, \"&lt;--li_copy_sorted\")\n\n# Questions\n# What happens to li and why?\n# What happens to li_copy and why?\n# What is the difference between list.sort() and sorted()?"
  },
  {
    "objectID": "pyodide.html#selection-sort",
    "href": "pyodide.html#selection-sort",
    "title": "Pyodide",
    "section": "Selection Sort",
    "text": "Selection Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef select_sort(array: List[int]) -&gt; None:\n  \"\"\"Find smallest elem and build up sorted prefix, operating directly on the array.\"\"\"\n\n\nfrom typing import List\n\ndef select_sort(array: List[int]) -&gt; None:\n  \"\"\"Find smallest elem and build up sorted prefix.\"\"\"\n\n  # create a variable that stores the length of the prefix\n  len_prefix = 0\n  # do sorting while the len_prefix is not the entire array length\n  while len_prefix != len(array):\n    for i in range(len_prefix, len(array)):\n      smallest = array[len_prefix]\n      if array[i] &lt; smallest:\n        smallest = array[i]\n        # preemptively move the smallest elem so far into position\n        temp = smallest\n        smallest = array[i]\n        array[i] = temp\n    len_prefix += 1\n\narray = [10, 101, 100, 1, 5, 3, 8, 2, 0]\nselect_sort(array)\nprint(array)\n\n# Questions\n# Why is a range used from len_prefix to len(array)?\n# If the preemptive move did not occur, what would have to happen instead?\n# Fill in comments for the code"
  },
  {
    "objectID": "pyodide.html#bubble-sort",
    "href": "pyodide.html#bubble-sort",
    "title": "Pyodide",
    "section": "Bubble Sort",
    "text": "Bubble Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef bubble_sort(array: List[int]) -&gt; None:\n  \"\"\"Bubble up the largest elem to the suffix, operating directly on the array.\"\"\"\n\n\nfrom typing import List\n\ndef bubble_sort(array: List[int]) -&gt; None:\n  \"\"\"Bubble up the largest elem to the suffix.\"\"\"\n\n  bubbling_needed = True\n  while bubbling_needed:\n    bubbling_needed = False\n    for i in range(len(array) - 1):\n      if array[i+1] &lt; array[i]:\n        bubbling_needed = True\n        temp = array[i]\n        array[i] = array[i+1]\n        array[i+1] = temp\n\narray = [10, 101, 100, 1, 5, 3, 8, 2, 0]\nbubble_sort(array)\nprint(array)\n\n# Question\n# Why is the suffix location not explicitly stored?"
  },
  {
    "objectID": "pyodide.html#insert-sort",
    "href": "pyodide.html#insert-sort",
    "title": "Pyodide",
    "section": "Insert Sort",
    "text": "Insert Sort\n\n# TODO: try it yourself, then look below to check your answer\n\ndef insert_sort(array: list[int]) -&gt; None:\n  \"\"\"Insert each element one at a time into the sorted prefix, operating on the array in place.\"\"\"\n\n\ndef insert_sort(array: list[int]) -&gt; None:\n  \"\"\"Insert each element one at a time into the sorted prefix, operating on the array in place.\"\"\"\n  for i in range(1,len(array)):\n    cur_elem = array[i]\n    j = i-1\n    while j &gt;= 0:\n      if cur_elem &gt;= array[j]:\n        break\n      if cur_elem &lt; array[j]:\n        array[j + 1] = array[j]\n        array[j] = cur_elem\n        j -= 1\n\narray = [-10, -100, 100, 1, 5, 3, 8, 2, -1]\nprint(f'array is: {array}')\n\nreturn_value = insert_sort(array)\nprint(f'array is: {array}')\nprint(f'return_value is: {return_value}')\n\n# Question\n# Why is the index j used?"
  },
  {
    "objectID": "pyodide.html#merge-sort",
    "href": "pyodide.html#merge-sort",
    "title": "Pyodide",
    "section": "Merge Sort",
    "text": "Merge Sort\n\n# TODO: try it yourself, then look below to check your answer\n\nfrom typing import List\n\ndef merge(a: List[int], b: List[int]) -&gt; list[int]:\n  \"\"\"Merge two sorted lists.\"\"\"\n\ndef merge_sort(array: list[int]) -&gt; list[int]:\n    \"\"\"Sort the provided list recursively.\"\"\"\n    # Base case is reaching a sorted list of length 0 or 1, which are always sorted.\n    # Recursively call merge_sort inside of merge, making the assumption that eventually,\n    # the array will be split into trivially sorted chunks\n    # The recursive calls must use inputs that are the first or second half of the list,\n    # which will be used in further splitting.\n\n\nfrom typing import List\n\ndef merge(a: List[int], b: List[int]) -&gt; list[int]:\n  \"\"\"Merge two sorted lists.\"\"\"\n\n  merged = []\n  idx_a, idx_b = 0, 0\n\n  while idx_a != len(a) and idx_b != len(b):\n    if a[idx_a] &lt;= b[idx_b]:\n      merged.append(a[idx_a])\n      idx_a += 1\n    else:\n      merged.append(b[idx_b])\n      idx_b += 1\n\n  if idx_a == len(a):\n    merged += b[idx_b:]\n  if idx_b == len(b):\n    merged += a[idx_a:]\n\n  return merged\n\n# Questions\n# What is idx_a and idx_b tracking?\n\narray1 = [1,4,6,8,10,11]\narray2 = [2,3,4,7,9,10]\nprint(f'array1 is: {array1} and array2 is: {array2}')\n\nreturn_value = merge(array1, array2)\nprint(f'array1 is: {array1} and array2 is: {array2}')\nprint(f'return_value is: {return_value}')\n\n\ndef merge_sort(array: list[int]) -&gt; list[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    # If the input array contains fewer than two elements,\n    # then return it as the result of the function\n    if len(array) &lt; 2:\n        return array\n    midpoint = len(array) // 2\n    # Sort the array by recursively splitting the input\n    # into two equal halves, sorting each half and merging them\n    # together into the final result\n    return merge(a=merge_sort(array[:midpoint]), b=merge_sort(array[midpoint:]))\n\ninput_list = [56, 3, 5, 9, 0, -10, 5, 77, 9, 101]\nsorted_list = merge_sort(input_list)\nprint(f\"Contents of the input list: {input_list}\")\nprint(f\"Contents of the sorted list: {sorted_list}\")\n\n# Questions\n# Is there anything here that could be adding computational complexity (i.e. time) to the algorithm?"
  },
  {
    "objectID": "pyodide.html#matrix",
    "href": "pyodide.html#matrix",
    "title": "Pyodide",
    "section": "Matrix",
    "text": "Matrix\n\nimport random\n\nmatrix = []\nfor i in range(10):\n  matrix.append([])\n  for j in range(10):\n    matrix[i].append(random.randint(-100,100))\n\nprint(matrix)\n\n[[59, -78, 95, 25, 33, 18, -45, 14, 29, -89], [86, 83, 68, 99, 86, -33, -85, 78, 66, -96], [79, -92, -29, -60, 29, 7, -76, -30, 47, 11], [-37, 66, -98, 84, -27, 51, -85, 34, -99, 68], [-99, 25, 61, -83, -28, -26, -98, 38, -53, -93], [-81, 62, -8, 99, -62, 59, -6, 65, -94, 14], [30, -19, 96, 69, -31, -63, 69, 63, 39, -64], [-14, -49, 74, -7, -84, 51, 60, -92, -36, 88], [54, -70, 44, -80, 90, -94, -13, -99, -31, 35], [-22, -70, -59, -23, 75, -17, 8, -65, -58, 39]]\n\n\n\n# count how many even numbers in matrix\ncounter = 0\n\nfor i in range(len(matrix)):\n  for j in range(len(matrix[i])):\n    # do something with matrix[i][j]\n    if matrix[i][j] % 2 == 0:\n      counter += 1\n\n\nprint(f\"there are {counter} even numbers in the matrix\")\n\nthere are 48 even numbers in the matrix\n\n\n\n# TODO: write an algorithm to count the numbers greater than 5 in the matrix"
  },
  {
    "objectID": "pyodide.html#dictionary",
    "href": "pyodide.html#dictionary",
    "title": "Pyodide",
    "section": "Dictionary",
    "text": "Dictionary\n\n# create a dictionary\nmlb_team_one = {\n    'Colorado' : 'Rockies',\n    'Boston'   : 'Red Sox',\n    'Minnesota': 'Twins',\n    'Milwaukee': 'Brewers'\n}\n\n\n# create a dictionary\nmlb_team_three = dict(\n    Colorado='Rockies',\n    Boston='Red Sox',\n    Minnesota='Twins',\n    Milwaukee='Brewers',\n    Seattle='Mariners'\n)\n\n\n# create a dictionary\nmlb_team_two = dict([\n    ('Colorado', 'Rockies'),\n    ('Boston', 'Red Sox'),\n    ('Minnesota', 'Twins'),\n    ('Milwaukee', 'Brewers')\n])\n\n\n# display and manipulate the contents of a dictionary\n\n# display the address\nprint(type(mlb_team_one))\n\n# display the contents\nprint(mlb_team_one)\n\n# lookup specific values using a key\nprint(mlb_team_one['Minnesota'])\nprint(mlb_team_one['Colorado'])\n\n# add a new value to the dictionary\nmlb_team_one['Kansas City'] = 'Royals'\n\n# all keys must be unique\nmlb_team_one['Kansas City'] = 'a different string'\n\n# lookup the new value inside of the dictionary\nprint(mlb_team_one['Kansas City'])\n\n&lt;class 'dict'&gt;\n{'Colorado': 'Rockies', 'Boston': 'Red Sox', 'Minnesota': 'Twins', 'Milwaukee': 'Brewers'}\nTwins\nRockies\na different string\n\n\n\n# attempt to access a key that does not exist in a dictionary\nprint(mlb_team_one['Toronto'])\n\n\n# attempt to use a list as a key\nkey = [1]\nmlb_team_one[key] = 'Detroit Tigers'\n\n\n# TODO: access an element from mlb_team_two and from mlb_team_three\n# TODO: add an element to mlb_team_two and from mlb_team_three, then reexplore the dicts\n# TODO: overwrite an element in mlb_team_two and reexplore the dict\n\n\n# TODO: create a new dict and make each key point to a short list\n# TODO: describe how you think this works\n\n\n# Discuss with your neighbor\n\n# 1) What are the similarities and differences in the ways to create a dictionary?\n# 2) Do all approaches to creating a dictionary lead to a dictionary with the same state?\n# 3) How does the Python programming language create and store the (key, value) pairs?\n# 4) How does the Python programming language lookup a value based on a specific key?"
  },
  {
    "objectID": "pyodide.html#bespoke-dictionary",
    "href": "pyodide.html#bespoke-dictionary",
    "title": "Pyodide",
    "section": "Bespoke Dictionary",
    "text": "Bespoke Dictionary\n\n# TODO: try to implement the dictionary yourself\n\n# Use a class to make a dictionary\n# Conceptually, think of the dict as a matrix, i.e. a list of lists\n# all the data will be stored inside the matrix as tuples of (key, value) pairs\n# matrix row will be selected by hashing a key\n# duplicate keys are not allowed\n\n# class must have a method to add and entry, i.e. a key value pair\n# class must have a method to get a value with a key\n# class must have a method to hash the keys\n\n# if more than one key should \"hash\" to the same row, append a new tuple to the row\n\n\n# Solution based on Figure 12.7 in Introduction to Computation and Programming Using Python\nfrom typing import Union\n\nclass Int_Dictionary():\n    \"\"\"Define a dictionary that only has integer keys, suitable for demonstration purposes.\"\"\"\n\n    def __init__(self, size: int) -&gt; None:\n        \"\"\"Construct an empty dictionary that uses a backing list called buckets.\"\"\"\n        # create the outer container of a matrix\n        self.matrix = []\n        # create an attribute for the requested number of rows (size)\n        self.num_rows = size\n        # loop through rows\n        for i in range(self.num_rows):\n            # add empty rows to the matrix\n            self.matrix.append([])\n\n    def _hash(self, key) -&gt; int:\n      # figure out which row to use given a key\n      idx = key % self.num_rows\n      return self.matrix[idx]\n\n    def add_entry(self, key: int, value: int) -&gt; None:\n        \"\"\"Add an entry to the dictionary given the provided key and value.\"\"\"\n        # hash the key\n        hash_row = self._hash(key)\n        # check to ensure that key does not already exists\n        for i in range(len(hash_row)):\n            if hash_row[i][0] == key:\n                # overwrite it!\n                hash_row[i] = (key, value)\n                return\n        # if we are here, the key must not exist yet, so simply append the new tuple\n        hash_row.append((key, value))\n\n    def get_value(self, key: int) -&gt; Union[int, None]:\n        \"\"\"Return the value associated with the key.\"\"\"\n        # hash the key\n        hash_row = self._hash(key)\n        # iterate through all of the elements in the row,\n        # looking for a specific element that has a matching key\n        for kv_pair in hash_row:\n            # found a matching key, so go ahead and return it\n            if kv_pair[0] == key:\n                return kv_pair[1]\n        # no matching key was found, so return None to indicate\n        # that the search failed when looking for the specific key\n        return None\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Define a textual representation for the dictionary.\"\"\"\n        result = \"{\"\n        for row in self.matrix:\n            for kv_pair in row:\n                result += f\"({kv_pair[0]}, {kv_pair[1]}),\\n \"\n        return result[:-3] + \"}\"\n\n\n# demonstrate the use of the Int_Dictionary\nimport random\n\ninteger_dictionary = Int_Dictionary(size = 17)\n\nfor i in range(20):\n    # choose a random key\n    key = random.choice(range(10**5))\n    # add entry to dict with key value pair\n    integer_dictionary.add_entry(key, i)\n\nprint(\"Contents of the Int_Dictionary:\")\nprint(integer_dictionary)\n\n\n# reveal the contents inside of the rows\n# note that this breaks the abstraction barrier and reveals the internal contents of the dictionary\nprint(\"The contents of the matrix rows are as follows:\")\nfor row in integer_dictionary.matrix:\n    print(f\"   {row}\")\n\n\n# Summary Question: how do you know when a collision has taken place when adding data to the Int_Dictionary?\n\n# Task: run this program many times and keep track of how many collisions occur when performing hashing\n# Task: can you come up with a situation in which the Int_Dictionary never has a collision?\n\n# Concluding Question: what are the trade-offs associated with the time efficiency and space overhead of a dictionary?"
  },
  {
    "objectID": "code/20250414_data_structures.html",
    "href": "code/20250414_data_structures.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250414_data_structures.html#matrix",
    "href": "code/20250414_data_structures.html#matrix",
    "title": "Data Structures",
    "section": "Matrix",
    "text": "Matrix\n\nimport random\n\nmatrix = []\nfor i in range(10):\n  matrix.append([])\n  for j in range(10):\n    matrix[i].append(random.randint(-100,100))\n\nprint(matrix)\n\n[[59, -78, 95, 25, 33, 18, -45, 14, 29, -89], [86, 83, 68, 99, 86, -33, -85, 78, 66, -96], [79, -92, -29, -60, 29, 7, -76, -30, 47, 11], [-37, 66, -98, 84, -27, 51, -85, 34, -99, 68], [-99, 25, 61, -83, -28, -26, -98, 38, -53, -93], [-81, 62, -8, 99, -62, 59, -6, 65, -94, 14], [30, -19, 96, 69, -31, -63, 69, 63, 39, -64], [-14, -49, 74, -7, -84, 51, 60, -92, -36, 88], [54, -70, 44, -80, 90, -94, -13, -99, -31, 35], [-22, -70, -59, -23, 75, -17, 8, -65, -58, 39]]\n\n\n\n# count how many even numbers in matrix\ncounter = 0\n\nfor i in range(len(matrix)):\n  for j in range(len(matrix[i])):\n    # do something with matrix[i][j]\n    if matrix[i][j] % 2 == 0:\n      counter += 1\n\n\nprint(f\"there are {counter} even numbers in the matrix\")\n\nthere are 48 even numbers in the matrix\n\n\n\n# TODO: write an algorithm to count the numbers greater than 5 in the matrix"
  },
  {
    "objectID": "code/20250414_data_structures.html#dictionary",
    "href": "code/20250414_data_structures.html#dictionary",
    "title": "Data Structures",
    "section": "Dictionary",
    "text": "Dictionary\n\n# create a dictionary\nmlb_team_one = {\n    'Colorado' : 'Rockies',\n    'Boston'   : 'Red Sox',\n    'Minnesota': 'Twins',\n    'Milwaukee': 'Brewers'\n}\n\n\n# create a dictionary\nmlb_team_three = dict(\n    Colorado='Rockies',\n    Boston='Red Sox',\n    Minnesota='Twins',\n    Milwaukee='Brewers',\n    Seattle='Mariners'\n)\n\n\n# create a dictionary\nmlb_team_two = dict([\n    ('Colorado', 'Rockies'),\n    ('Boston', 'Red Sox'),\n    ('Minnesota', 'Twins'),\n    ('Milwaukee', 'Brewers')\n])\n\n\n# display and manipulate the contents of a dictionary\n\n# display the address\nprint(type(mlb_team_one))\n\n# display the contents\nprint(mlb_team_one)\n\n# lookup specific values using a key\nprint(mlb_team_one['Minnesota'])\nprint(mlb_team_one['Colorado'])\n\n# add a new value to the dictionary\nmlb_team_one['Kansas City'] = 'Royals'\n\n# all keys must be unique\nmlb_team_one['Kansas City'] = 'a different string'\n\n# lookup the new value inside of the dictionary\nprint(mlb_team_one['Kansas City'])\n\n&lt;class 'dict'&gt;\n{'Colorado': 'Rockies', 'Boston': 'Red Sox', 'Minnesota': 'Twins', 'Milwaukee': 'Brewers'}\nTwins\nRockies\na different string\n\n\n\n# attempt to access a key that does not exist in a dictionary\nprint(mlb_team_one['Toronto'])\n\n\n# attempt to use a list as a key\nkey = [1]\nmlb_team_one[key] = 'Detroit Tigers'\n\n\n# TODO: access an element from mlb_team_two and from mlb_team_three\n# TODO: add an element to mlb_team_two and from mlb_team_three, then reexplore the dicts\n# TODO: overwrite an element in mlb_team_two and reexplore the dict\n\n\n# TODO: create a new dict and make each key point to a short list\n# TODO: describe how you think this works\n\n\n# Discuss with your neighbor\n\n# 1) What are the similarities and differences in the ways to create a dictionary?\n# 2) Do all approaches to creating a dictionary lead to a dictionary with the same state?\n# 3) How does the Python programming language create and store the (key, value) pairs?\n# 4) How does the Python programming language lookup a value based on a specific key?"
  },
  {
    "objectID": "code/20250414_data_structures.html#bespoke-dictionary",
    "href": "code/20250414_data_structures.html#bespoke-dictionary",
    "title": "Data Structures",
    "section": "Bespoke Dictionary",
    "text": "Bespoke Dictionary\n\n# TODO: try to implement the dictionary yourself\n\n# Use a class to make a dictionary\n# Conceptually, think of the dict as a matrix, i.e. a list of lists\n# all the data will be stored inside the matrix as tuples of (key, value) pairs\n# matrix row will be selected by hashing a key\n# duplicate keys are not allowed\n\n# class must have a method to add and entry, i.e. a key value pair\n# class must have a method to get a value with a key\n# class must have a method to hash the keys\n\n# if more than one key should \"hash\" to the same row, append a new tuple to the row\n\n\n# Solution based on Figure 12.7 in Introduction to Computation and Programming Using Python\nfrom typing import Union\n\nclass Int_Dictionary():\n    \"\"\"Define a dictionary that only has integer keys, suitable for demonstration purposes.\"\"\"\n\n    def __init__(self, size: int) -&gt; None:\n        \"\"\"Construct an empty dictionary that uses a backing list called buckets.\"\"\"\n        # create the outer container of a matrix\n        self.matrix = []\n        # create an attribute for the requested number of rows (size)\n        self.num_rows = size\n        # loop through rows\n        for i in range(self.num_rows):\n            # add empty rows to the matrix\n            self.matrix.append([])\n\n    def _hash(self, key) -&gt; int:\n      # figure out which row to use given a key\n      idx = key % self.num_rows\n      return self.matrix[idx]\n\n    def add_entry(self, key: int, value: int) -&gt; None:\n        \"\"\"Add an entry to the dictionary given the provided key and value.\"\"\"\n        # hash the key\n        hash_row = self._hash(key)\n        # check to ensure that key does not already exists\n        for i in range(len(hash_row)):\n            if hash_row[i][0] == key:\n                # overwrite it!\n                hash_row[i] = (key, value)\n                return\n        # if we are here, the key must not exist yet, so simply append the new tuple\n        hash_row.append((key, value))\n\n    def get_value(self, key: int) -&gt; Union[int, None]:\n        \"\"\"Return the value associated with the key.\"\"\"\n        # hash the key\n        hash_row = self._hash(key)\n        # iterate through all of the elements in the row,\n        # looking for a specific element that has a matching key\n        for kv_pair in hash_row:\n            # found a matching key, so go ahead and return it\n            if kv_pair[0] == key:\n                return kv_pair[1]\n        # no matching key was found, so return None to indicate\n        # that the search failed when looking for the specific key\n        return None\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Define a textual representation for the dictionary.\"\"\"\n        result = \"{\"\n        for row in self.matrix:\n            for kv_pair in row:\n                result += f\"({kv_pair[0]}, {kv_pair[1]}),\\n \"\n        return result[:-3] + \"}\"\n\n\n# demonstrate the use of the Int_Dictionary\nimport random\n\ninteger_dictionary = Int_Dictionary(size = 17)\n\nfor i in range(20):\n    # choose a random key\n    key = random.choice(range(10**5))\n    # add entry to dict with key value pair\n    integer_dictionary.add_entry(key, i)\n\nprint(\"Contents of the Int_Dictionary:\")\nprint(integer_dictionary)\n\n\n# reveal the contents inside of the rows\n# note that this breaks the abstraction barrier and reveals the internal contents of the dictionary\nprint(\"The contents of the matrix rows are as follows:\")\nfor row in integer_dictionary.matrix:\n    print(f\"   {row}\")\n\n\n# Summary Question: how do you know when a collision has taken place when adding data to the Int_Dictionary?\n\n# Task: run this program many times and keep track of how many collisions occur when performing hashing\n# Task: can you come up with a situation in which the Int_Dictionary never has a collision?\n\n# Concluding Question: what are the trade-offs associated with the time efficiency and space overhead of a dictionary?"
  },
  {
    "objectID": "code/20250217_cloning_aliasing_listcomp.html",
    "href": "code/20250217_cloning_aliasing_listcomp.html",
    "title": "Cloning and Aliasing",
    "section": "",
    "text": "Open In Colab\n\n\n\nCloning and Aliasing\n\nelem1 = 'apple' # a is a string object \"apple\"\nelem2 = 'bear' # b is string object \"bear\"\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a # b points to the SAME list in memory!\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nelem1 = 'apple' # a is a string object \"apple\"\nelem2 = 'bear' # b is a string object \"bear\"\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a # b points to the SAME list in memory!\na.append('cat')\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nelem1 = 'apple' # a is a string object \"apple\"\nelem2 = 'bear' # b is a string object \"bear\"\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a[:] # b is a shallow copy\na.append('cat')\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nelem1 = 'apple' # a is a string object \"apple\"\nelem2 = 'bear' # b is a string object \"bear\"\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a.copy() # b is a shallow copy\na.append('cat')\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nelem1 = ['apple'] # a is a list object with a string inside [\"apple\"]\nelem2 = ['bear'] # b is a list object with a string inside [\"bear\"]\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a[:] # b is a shallow copy\na.append(['cat'])\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nelem1 = ['apple'] # a is a list object with a string inside [\"apple\"]\nelem2 = ['bear'] # b is a list object with a string inside [\"bear\"]\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = a[:] # b is a shallow copy\na[0].append(['cat'])\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nimport copy\n\nelem1 = ['apple'] # a is a list object with a string inside [\"apple\"]\nelem2 = ['bear'] # b is a list object with a string inside [\"bear\"]\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = copy.deepcopy(a) # b is a deep copy\na.append(['cat'])\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\nimport copy\n\nelem1 = ['apple'] # a is a list object with a string inside [\"apple\"]\nelem2 = ['bear'] # b is a list object with a string inside [\"bear\"]\n\na = [elem1,elem2] # a is name of the list that points to the objects that are already in memory\nb = copy.deepcopy(a) # b is a deep copy\na[0].append(['cat'])\n\nprint(a)\nprint(b)\n\nprint(\"id(a)\", id(a))\nprint(\"id(b)\", id(b))\n\nprint(\"id(a[0])\", id(a[0]))\nprint(\"id(b[0])\", id(b[0]))\nprint(\"id(elem1)\", id(elem1))\n\n\n# What is the difference between and shallow and deep copy?\n\n\n\nList Comprehensions\n\n[e**2 for e in range(6)]\n\n\n[e**2 for e in range(8) if e%2 == 0]\n\n\n# write a list comprehension that contains the elements 3 through 18 including 18\n\n\n# write a list comprehension that contains the only odd number 3 through 18\n\n\n# write a list comprehension that contains 12 random numbers, where the random numbers are between 4 and 40\n\nfrom random import randint\n\n\n# write a list comprehension that contains 12 random numbers, where the random numbers are between 4 and 40\n# then convert the result to a tuple\n\nfrom random import randint"
  },
  {
    "objectID": "code/20250401_complexity.html",
    "href": "code/20250401_complexity.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250401_complexity.html#worst-case-complexity",
    "href": "code/20250401_complexity.html#worst-case-complexity",
    "title": "Data Structures",
    "section": "Worst Case Complexity",
    "text": "Worst Case Complexity\n\nimport random\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n\nprint(counter)\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n  if array[i] &gt; 50:\n    break\n\nprint(counter)\nprint(array[:20])\n\n\narray = [random.randint(0,100) for _ in range(1000)]\nn = len(array)\n\ncounter = 0\nfor i in range(n):\n    # do a constant number of things for each element\n  counter += 1\n  if array[i] &gt; 100:\n    break\n\nprint(counter)\nprint(array[:20])"
  },
  {
    "objectID": "code/20250401_complexity.html#empirical-analysis",
    "href": "code/20250401_complexity.html#empirical-analysis",
    "title": "Data Structures",
    "section": "Empirical Analysis",
    "text": "Empirical Analysis\n\n### Containment Lab\n\n# Perform timing experiments using the timeit package\n\n# NOTE: these experiments are not rigorous doubling\n# experiments but rather small-scale experiments that\n# illustrate how the timing package works in Python\n\n# Refer to the documentation of timeit for more details:\n# https://docs.python.org/3/library/timeit.html\n\n# import the timeit package used to collect\n# performance data about the function's execution\nimport timeit\n\n# define the function to analyze in a string\n# so that it can be passed to the timeit function\ncode_to_time = \"\"\"def factorial(n: int) -&gt; int:\n    answer = 1\n    while n &gt; 1:\n        answer *= n\n        n -= 1\n    return answer\n\nfactorial(100)\"\"\"\n\n# repeatedly run the code_to_time and\n# report the performance results; this\n# runs a total of three benchmarking campaigns\n# that will individually run the code a\n# total of 10000 times. It then reports\n# the total execution time for each campaign\nprint (timeit.repeat(stmt = code_to_time,\n                     repeat = 3,\n                     number = 10000))\n\n\n### alternate method\n\ndef factorial(n) -&gt; int:\n  answer = 1\n  while n &gt;= 1:\n    answer *= n\n    n -= 1\n  return answer\n\n%timeit -n 10000 -r 3 factorial(100)\n\n\n# Questions and TODOs\n\n# If the total time is reported for each run, how can the average time be found?\n# TODO: write an algorithm to compute the average time it took for each repetion within a run\n# TODO: write an algorithm to compute the average time it took for a single repeition"
  },
  {
    "objectID": "code/20250401_complexity.html#doubling-experiment",
    "href": "code/20250401_complexity.html#doubling-experiment",
    "title": "Data Structures",
    "section": "Doubling Experiment",
    "text": "Doubling Experiment\n\n# TODO: Using one of the methods shown above, run a doubling experiment on this code\n# Start by making a random list of length input_size, then pass actual parameters to the function\n# Record relevant results into the Markdown table\n# Repeat above with doubled input serval times\n\n\nfrom typing import List\n\ndef function(array: List[int], n: int) -&gt; int:\n  counter = 0\n  for i in range(n):\n    array[i] += 1\n    for j in range(n):\n      array[j] += 1\n      for k in range(n):\n        array[k] += 1\n        counter += 1\n  return counter\n\n\ninput_size = 50\n\n\ninput_size = 100\n\n\ninput_size = 200\n\n\ninput_size = 400\n\n\n\n\ninput size\nduration\n\n\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\nTODO\nTODO\n\n\n\nDoubling ratios - row2:row1 =&gt; - row3:row2 =&gt; - row4:row3 =&gt;"
  },
  {
    "objectID": "code/20250310_importing.html",
    "href": "code/20250310_importing.html",
    "title": "Guttag Chapter 7 - Modules",
    "section": "",
    "text": "Open In Colab\n\n\n\nGuttag Chapter 7 - Modules\n\n%reset -f\n\nimport Typing\n\n# Recalling the apply_to_each function\n# TODO: access the List symbol without modifying the import statement\n# TODO: access the Callable symbol without modifying the import statement\n# TODO: access the Tuple symbol without modifying the import statement\n\n\n%reset -f\n\nfrom Typing import List, Callable, Tuple\n\n# Recalling the apply_to_each function\n# TODO: access the List symbol without modifying the import statement\n# TODO: access the Callable symbol without modifying the import statement\n# TODO: access the Tuple symbol without modifying the import statement\n\n\n%reset -f\n\n# TODO: write an import statement to give direct access to the randint function in the random lib\n\n\n%reset -f\n\n# TODO: write an import statement that renames the random lib to be your name\n# TODO: then acccess the randint function using do notation\n\n\n# TODO: think of another example to test using the copy module"
  },
  {
    "objectID": "code/20250210_structured_types_lists.html",
    "href": "code/20250210_structured_types_lists.html",
    "title": "Defining Lists in Python Programs",
    "section": "",
    "text": "Open In Colab\n\n\n\nDefining Lists in Python Programs\n\nlists are a data type\nlists are containers\nlists contain things that can be any data type\nlists are mutable\n\n\n# these are lists\nnew_pair = [3.2, 4]\nnew_quadlist = [\"Story number\", 3, \"is\", True]\n\n# what is the data type of `new_pair` and `new_quadlist`?\n# what is similar about the definition of `new_pair` and `new_quadlist`\n# What are the data types of the values in these lists?\n\n\n# Is it required to have all the same data type within a list?\n# Write your own example storing three mixed-type items in a list.\n\n\n# these are lists\nlist_empty = []\nlist_str = [\"Story\"]\nlist_int = [3]\nlist_float = [3.14159]\n\n\n# what is the data type of `list_empty` and `list_str`?\n# what is the data type of `list_int` and `list_float`?\n# What are the data types of the _values_ in these list?\n\n\n# Do lists always have to contain data?\n# What is the difference between a list and a number conceptually\n# What is the difference between a list and a number syntactically?\n\n\n# does a tuple == a list with the same elems?\n\ntu = (1,)\nli = [1]\nprint(\"does a tuple == a list with the same elems? \", tu == li)\nprint(\"are the elements the same? \", tu[0] == li[0])\n\n\n\ncreating new lists\n\npair = [3.2, 4]\nquadlist = [\"Story number\", 3, \"is\", True]\nnew_list = pair + quadlist\nprint(new_list)\n\n\n\npacking and unpacking lists\n\n# pack a list into a variable\npair = [3,4]\n# create a list named quintlist and pack in 5 elements\n\n\n# unpack the contents of a list\n\nx, y = pair\n\n# unpack the contents of `quintlist` into 5 new variables\n\n\n# describe your understanding of a list so far\n\n\n# what is happening here?\n\na = [1, 2, 3]\nprint(a[0])\n\n# is `a` a list?\n# what do the square brackets mean\n# is there any variable name assigned to the list?\n\n\n# what happens in this line of code\n\na = [1, 2, 3][0]\n\n# is `a` a list?\n# what do the parens mean\n# what do the square brackets mean\n# is there any variable name assigned to the list?\n\n\n# what happens in this line of code\n\na = [1, 2, 3]\na[0] = 10\n\n# is `a` a list?\n# what do the parens mean\n# what do the square brackets mean\n# is there any variable name assigned to the list?\n# does the code crash?\n\n\n# re-describe your understanding of a list so far\n\n\n\nappending to existing list\n\na = [1, 2, 3]\na.append(1)\nprint(a)\n\n\na = [1, 2, 3]\nlist.append(a, 1)\nprint(a)\n\n\n\nloops\n\na = [0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000]\n\nfor item in a:\n  print(item)\n\nfor character in a[4]:\n  print(character)\n\n\n\nalgorithms with lists\n\n# define a function that can apply a provided\n# function to each element in the list to change\ndef apply_to_each(list_to_change, function):\n    for i in range(len(list_to_change)):\n        list_to_change[i] = function(list_to_change[i])\n\n\nvalues = [1, -2, 3.33]\nprint(\"values =\", values)\napply_to_each(values, abs)\nprint(\"values =\", values)"
  },
  {
    "objectID": "code/20250210_structured_types_tuples.html",
    "href": "code/20250210_structured_types_tuples.html",
    "title": "Defining n-Tuples in Python Programs",
    "section": "",
    "text": "Open In Colab\n\n\n\nDefining n-Tuples in Python Programs\n\ntuples are a data type\ntuples are containers\ntuples contain things that can be any data type\ntuples are immutable\n\n\n# these are tuples\npair = 3, 4.9\nquadruple = \"Story number\", 3, \"is\", False\n\n# what is the data type of `pair` and `quadruple`?\n# what is similar about the definition of `pair` and `quadruple`\n# What are the data types of the values in these tuples?\n\n\n# these are tuples\nnew_pair = (3.2, 4)\nnew_quadruple = (\"Story number\", 3, \"is\", True)\n\n# what is the data type of `new_pair` and `new_quadruple`?\n# what is similar about the definition of `new_pair` and `new_quadruple`\n# What are the data types of the values in these tuples?\n\n\n# Is it required to have all the same data type within a tuple?\n# Write your own example storing three mixed-type items in a tuple.\n\n\n# these are tuples\ntuple_empty = ()\ntuple_str = (\"Story\",)\ntuple_int = (3,)\ntuple_float = (3.14159,)\n\n\n# what is the data type of `tuple_empty` and `tuple_str`?\n# what is the data type of `tuple_int` and `tuple_float`?\n# what is similar about the definition of `tuple_str` and `tuple_int` and `tuple_float`\n# what do the variable names have to do with the data type?\n# What are the data types of the _values_ in these tuples?\n\n\n# these are NOT tuples\nexample_int = (100)\nexample_float = (100.001)\n\n# what are the data types of `example_int` and `example_float`?\n# how else could these same variable names and values be used in assignment?\n# rewrite these as tuples\n\n\n# Do tuples always have to contain data?\n# What syntax does a singleton tuple require?\n# What is the difference between a tuple and a number conceptually\n# What is the difference between a tuple and a number syntactically?\n\n\n\ncreating new tuples\n\npair = (3.2, 4)\nquadruple = (\"Story number\", 3, \"is\", True)\nnew_tuple = pair + quadruple\nprint(new_tuple)\n\n(3.2, 4, 'Story number', 3, 'is', True)\n\n\n\n\npacking and unpacking tuples\n\n# pack a tuple into a variable\npair = (3,4)\n# create a tuple named quintuple and pack in 5 elements\n\n\n# unpack the contents of a tuple\nx, y = pair\n(x, y) = pair\n\n# unpack the contents of `quintuple` into 5 new variables\n\n\n# describe your understanding of a tuple so far\n\n\n# what is happening here?\n\na = (1, 2, 3)\nprint(a[0])\n\n# is `a` a tuple?\n# what do the parens mean\n# what do the square brackets mean\n# is there any variable name assigned to the tuple?\n\n\n# what happens in this line of code\n\na = (1, 2, 3)[0]\n\n# is `a` a tuple?\n# what do the parens mean\n# what do the square brackets mean\n# is there any variable name assigned to the tuple?\n\n\n# what happens in this line of code\n\na = (1, 2, 3)\na[0] = 10\n\n# is `a` a tuple?\n# what do the parens mean\n# what do the square brackets mean\n# is there any variable name assigned to the tuple?\n# why does the code crash?\n\n\n# re-describe your understanding of a tuple so far\n\n\n\nloops\n\na = (0, 'elem1', 'elem2', 3, 'this is the fourth element', '5', '6.0000', 7, 8.0000)\n\nfor item in a:\n  print(item)\n\n\n\nalgorithms with tuples\n\n# Perform intersections with tuples of values\n#\n# define a function that uses a single\n# for loop to compute the intersection of\n# the two input tuples\ndef intersect(tuple_one, tuple_two):\n    result = ()\n    for element in tuple_one:\n        if element in tuple_two:\n            result += (element,)\n    return result\n\n\n# create two tuples and then compute their intersection\nfirst_tuple = (1, \"a\", 2)\nsecond_tuple = (\"b\", 2, \"a\")\nintersection_tuple_one = intersect(first_tuple, second_tuple)\nintersection_tuple_two = intersect(second_tuple, first_tuple)\nprint(f\"Intersection of {first_tuple} with {second_tuple} is {intersection_tuple_one}\")\nprint(f\"Intersection of {second_tuple} with {first_tuple} is {intersection_tuple_two}\")"
  },
  {
    "objectID": "code/20250326_classes.html",
    "href": "code/20250326_classes.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab"
  },
  {
    "objectID": "code/20250326_classes.html#a-vehicle-class",
    "href": "code/20250326_classes.html#a-vehicle-class",
    "title": "Data Structures",
    "section": "A Vehicle Class",
    "text": "A Vehicle Class\n\n# Please examine and run and edit the code below to answer these questions:\n\n# What is the syntax used to instatiate a Vehicle?\n# Which dunder method is responsible for allowing the print statement to work?\n# What happens if you remove that method?\n# Does the Vehicle class have any publically accessible attributes?\n# How can you tell?\n# Does the Vehicle class have any publically accessible methods?\n# How can you tell?\n# What happens if you try to check if two vehicles are equal?\n# Add a dunder method to make it possible to check for equality.\n\n\nclass Vehicle():\n  \"\"\"Abstract data type representing a vehicle.\"\"\"\n\n  def __init__(self, num_seats: int, num_doors: int, engine_type: str):\n    \"\"\"Define the constructor.\"\"\"\n    self._seats = num_seats\n    self._doors = num_doors\n    self._engine = engine_type\n    self._mileage = 0.0\n\n  def drive(self, num_miles: float):\n    \"\"\"Add mileage to the vehicle.\"\"\"\n    self._mileage += num_miles\n    return None\n\n  def mileage(self):\n    \"\"\"Get the milage of the vehicle.\"\"\"\n    return self._mileage\n\n  def __repr__(self):\n    \"\"\"Define the printable representation of the vehicle.\"\"\"\n    return f\"{self._engine} vehicle with {self._seats} seats, \" +\\\n           f\"{self._doors} doors, and {self._mileage} miles.\"\n\n\n# Instantiate a vehicle with the constructor\nnew_sports_car = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\n\nprint(new_sports_car)\ntype(new_sports_car)\n\n\n\n# Use a vehicle method to drive the car\ndistance = 1000\nnew_sports_car.drive(distance)\n\nprint(new_sports_car)\n\n\n# Instantiate two vehicles and check if they are equal\n\nnew_sports_car1 = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\nnew_sports_car2 = Vehicle(num_seats = 2, num_doors = 2, engine_type = \"gas\")\nprint(\"testing if new_sports_car1 == new_sports_car2:\", new_sports_car1 == new_sports_car2)"
  },
  {
    "objectID": "grades.html",
    "href": "grades.html",
    "title": "Grades",
    "section": "",
    "text": "Please check Canvas for your grades here.\nFor detailed discussion of grades, please attend office hours"
  },
  {
    "objectID": "slides/01-welcome.html#cmpsc-101---data-structures",
    "href": "slides/01-welcome.html#cmpsc-101---data-structures",
    "title": "Welcome to CMPSC 101",
    "section": "CMPSC 101 - Data Structures",
    "text": "CMPSC 101 - Data Structures\nSpring 2025\nM/W/F 9-9:50am\nTu 2:30-4pm\nAlden 101"
  },
  {
    "objectID": "slides/01-welcome.html#where-are-we",
    "href": "slides/01-welcome.html#where-are-we",
    "title": "Welcome to CMPSC 101",
    "section": "Where are we?",
    "text": "Where are we?\n\n\nDepartment of Computer and Information Science\nFour Majors/Minors\n\nComputer Science\nData Science\nInformatics\nSoftware Engineering\n\nCommon Doubles\n\nArt, Science, and Innovation\nEconomics"
  },
  {
    "objectID": "slides/01-welcome.html#what-is-this-course-about",
    "href": "slides/01-welcome.html#what-is-this-course-about",
    "title": "Welcome to CMPSC 101",
    "section": "What is this course about?",
    "text": "What is this course about?\n\n\nbreaking apart complex problems\norganizing all subproblems\ncalculating solutions to subproblems with algorithm\nstoring and structuring the calculations"
  },
  {
    "objectID": "slides/01-welcome.html#learning-outcomes",
    "href": "slides/01-welcome.html#learning-outcomes",
    "title": "Welcome to CMPSC 101",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nDescribe data structures and algorithms and their inherent trade-offs.\nSolve problems using data structures and algorithms.\nCharacterize the performance of data structures and algorithms with empirical methods.\nUse IDEs, version control, test suites, and other industry standard tools.\nDocument code in markdown."
  },
  {
    "objectID": "slides/01-welcome.html#other-syllabus-highlights",
    "href": "slides/01-welcome.html#other-syllabus-highlights",
    "title": "Welcome to CMPSC 101",
    "section": "Other Syllabus Highlights",
    "text": "Other Syllabus Highlights\n\nDiscord usage is a major part of participation (20% of overall grade)\nQuizzes on the day following lab, including this week\nLabs are due before lab!\nFour tokens grant automatic extensions for one week\nAfter the first week, five absences will be excused before overall grade is impacted\n\nthree lates are equivalent to an absence"
  },
  {
    "objectID": "slides/01-welcome.html#materials",
    "href": "slides/01-welcome.html#materials",
    "title": "Welcome to CMPSC 101",
    "section": "Materials",
    "text": "Materials\n\n\nCourse Website\n\nsyllabus\nassignment schedule for reading and assignment due dates\nlinks to all course materials"
  },
  {
    "objectID": "slides/01-welcome.html#materials-continued",
    "href": "slides/01-welcome.html#materials-continued",
    "title": "Welcome to CMPSC 101",
    "section": "Materials Continued",
    "text": "Materials Continued\n\n\nGitHub for accessing and submitting assignments\nPython Notebooks/Google Colab for coding examples\nGoogle Forms for participation and group activities\nDiscord for announcements and participation\nCanvas for grades"
  },
  {
    "objectID": "slides/01-welcome.html#tell-us-about-yourself",
    "href": "slides/01-welcome.html#tell-us-about-yourself",
    "title": "Welcome to CMPSC 101",
    "section": "Tell us about yourself!",
    "text": "Tell us about yourself!\n\nName, where you are from, first favorite band, and some of your current favorite foods?"
  },
  {
    "objectID": "slides/01-welcome.html#cis-shared-values",
    "href": "slides/01-welcome.html#cis-shared-values",
    "title": "Welcome to CMPSC 101",
    "section": "CIS Shared Values",
    "text": "CIS Shared Values"
  },
  {
    "objectID": "slides/01-welcome.html#what-if",
    "href": "slides/01-welcome.html#what-if",
    "title": "Welcome to CMPSC 101",
    "section": "What if?",
    "text": "What if?\n\n\n\n\na student knows they are going to be late to a one-on-one office hours appointment?\na student wants to submit their work late but not use a token?\n40% of students in a course listed the same 8 foods as their favorite foods on an exam\na student has a question but has not reviewed notes or read the textbook?\na student writes about a topic that is not in the textbook or notes on an exam?"
  },
  {
    "objectID": "slides/01-welcome.html#setting-up",
    "href": "slides/01-welcome.html#setting-up",
    "title": "Welcome to CMPSC 101",
    "section": "Setting up",
    "text": "Setting up\n\nbookmark the website\nbookmark access to your repos\nbookmark the 101 Discord Channel, or access from the course website\nbookmark notes that you take in Google Colab or elsewhere\nbookmark Canvas\netc."
  },
  {
    "objectID": "slides/01-welcome.html#software-installation",
    "href": "slides/01-welcome.html#software-installation",
    "title": "Welcome to CMPSC 101",
    "section": "Software Installation!",
    "text": "Software Installation!\nSwitch over to the next document"
  },
  {
    "objectID": "slides/07-function-scope.html#goals",
    "href": "slides/07-function-scope.html#goals",
    "title": "Function Scope",
    "section": "Goals",
    "text": "Goals\n\n\nReview Function Definition and Calling\nDefine Formal vs Actual Parameters\nDefine Keyword Arguments, Positional Arguments, Default Values\nDefine Scope\nUnravel Point of Execution\nDefine Higher-Order Functions"
  },
  {
    "objectID": "slides/07-function-scope.html#what-is-a-function",
    "href": "slides/07-function-scope.html#what-is-a-function",
    "title": "Function Scope",
    "section": "What is a Function",
    "text": "What is a Function\n\n\nFunctions are like cooking recipes\nSet of instructions that have a name\n\nCake, Cookies\n\nFunctions contain steps for how to do something with certain ingredients, called parameters"
  },
  {
    "objectID": "slides/07-function-scope.html#function-definitions",
    "href": "slides/07-function-scope.html#function-definitions",
    "title": "Function Scope",
    "section": "Function Definitions",
    "text": "Function Definitions\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\n\n\n\n\n\nline 1 is the function signature\n\ndef python keyword that starts off the function\nprime_test_exhaustive name of the function\n(x: int) formal parameters for the function inside ()\nx name of the parameter, to be used inside!\n: int input type annotation for x\n-&gt; bool output type annotation\n: end of the function signature"
  },
  {
    "objectID": "slides/07-function-scope.html#function-definitions-1",
    "href": "slides/07-function-scope.html#function-definitions-1",
    "title": "Function Scope",
    "section": "Function Definitions",
    "text": "Function Definitions\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\n\n\n\n\n\nEverything after the function signature that is IN the function must be indented\nline 2 \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\" docstring\nlines 3-10 contain code that makes use of the formal parameter x\nreturn keyword that ends the function and makes any following values available outside of the function\n\nreturn True would make True available outside of the function"
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-with-literal",
    "href": "slides/07-function-scope.html#function-calling-with-literal",
    "title": "Function Scope",
    "section": "Function Calling with Literal",
    "text": "Function Calling with Literal\nresult = prime_test_exhaustive(97)\n\n\nread this expression from right to left\ninput parameter is 97 inside ( )\n\n97 gets assigned to the function’s formal parameter\n\nprime_test_exhaustive is the name of the function\n= assignment operator ready to assign anything that is returned out of the function\nresult is the variable whose value will become whatever is returned out of the function\nn.b. this code does not print anything"
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-with-variable",
    "href": "slides/07-function-scope.html#function-calling-with-variable",
    "title": "Function Scope",
    "section": "Function Calling with Variable",
    "text": "Function Calling with Variable\nnumber = 97\nresult = prime_test_exhaustive(number)\nprint(result)\n\n\nline 1 assigns 97 to the variable named number\nline 2 input parameter is number inside ( )\n\nnumber gets assigned to the function’s formal parameter\n\nprime_test_exhaustive is the name of the function\n= assignment operator ready to assign anything that is returned out of the function\nresult is the variable whose value will become whatever is returned out of the function\nresult is printed"
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-wrong",
    "href": "slides/07-function-scope.html#function-calling-wrong",
    "title": "Function Scope",
    "section": "Function Calling Wrong",
    "text": "Function Calling Wrong\nresult = prime_test_exhaustive\n\n\nfirst one refers only the memory location of the function!\n\n\n\nprime_test_exhaustive()\n\n\nsecond one calls the function using () but no parameter is supplied!\n\n\n\n\nprime_test_exhaustive(int)\n\n\nthird one supplies a type instead of a value"
  },
  {
    "objectID": "slides/07-function-scope.html#review-summary",
    "href": "slides/07-function-scope.html#review-summary",
    "title": "Function Scope",
    "section": "Review Summary",
    "text": "Review Summary\n\n\nFunctions are a set of instructions\nFunctions contains return statements\nThe function is executed when it is called\nThe function call supplies actual parameters with real values\nThe programmer must add logic to store the return value after the function is called.\nPrinting should occur after a function call"
  },
  {
    "objectID": "slides/07-function-scope.html#formal-parameters",
    "href": "slides/07-function-scope.html#formal-parameters",
    "title": "Function Scope",
    "section": "Formal Parameters",
    "text": "Formal Parameters\n\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nnumber = 97\nresult = prime_test_exhaustive(number)\nprint(result)\n\n\n\nTrue\n\n\n\n\nthe formal parameter is what is supplied in the function signature inside ()\n\nx\n\nthe formal parameter is the variable used within the function instructions, representing an abstract value\nit helps… form ….the function…"
  },
  {
    "objectID": "slides/07-function-scope.html#actual-parameters",
    "href": "slides/07-function-scope.html#actual-parameters",
    "title": "Function Scope",
    "section": "Actual Parameters",
    "text": "Actual Parameters\n\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nnumber = 97\nresult = prime_test_exhaustive(number)\nprint(result)\n\n\n\nTrue\n\n\n\n\nthe actual parameter is supplied in the function call\n\nnumber\n\nthe actual parameter has an actual value and is not abstract"
  },
  {
    "objectID": "slides/07-function-scope.html#formal-and-actual-parameters-are-different",
    "href": "slides/07-function-scope.html#formal-and-actual-parameters-are-different",
    "title": "Function Scope",
    "section": "Formal and Actual Parameters are different",
    "text": "Formal and Actual Parameters are different\n\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nnumber = 97\nresult = prime_test_exhaustive(number)\nprint(result)\n\n\n\nTrue\n\n\n\n\nthe name of the actual parameter does NOT have to match the name of the formal parameter!\nthe value of the actual parameter gets assigned to the formal parameter when the function is called\ntry it, assigning 101 to number!"
  },
  {
    "objectID": "slides/07-function-scope.html#formal-and-actual-parameters-are-different-1",
    "href": "slides/07-function-scope.html#formal-and-actual-parameters-are-different-1",
    "title": "Function Scope",
    "section": "Formal and Actual Parameters are different",
    "text": "Formal and Actual Parameters are different\n\nThis code will crash\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nresult = prime_test_exhaustive(x)\nprint(result)\n\n\nthe formal parameter only exists inside the function\ntrying to use the formal parameter outside of the function will not work because it does not exist outside of the function"
  },
  {
    "objectID": "slides/07-function-scope.html#formal-and-actual-parameters-are-different-2",
    "href": "slides/07-function-scope.html#formal-and-actual-parameters-are-different-2",
    "title": "Function Scope",
    "section": "Formal and Actual Parameters are different",
    "text": "Formal and Actual Parameters are different\n\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nx = 97\nresult = prime_test_exhaustive(x)\nprint(result)\n\n\n\nTrue\n\n\n\n\nthe name of the actual parameter does NOT have to match the name of the formal parameter!\nbut it could…they are completely different variables\nthe value of the actual parameter gets assigned to the formal parameter when the function is called\ntry it, assigning 101 to the global x!"
  },
  {
    "objectID": "slides/07-function-scope.html#formal-vs-actual-parameters-summary",
    "href": "slides/07-function-scope.html#formal-vs-actual-parameters-summary",
    "title": "Function Scope",
    "section": "Formal vs Actual Parameters Summary",
    "text": "Formal vs Actual Parameters Summary\n\n\nthe formal parameter helps form the function, and is abstract\nthe actual parameter has an actual value\neven if they have the same name, they are different variables!\nthe actual parameter gets assigned to the formal parameter when the function is called"
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-with-positional-arguments",
    "href": "slides/07-function-scope.html#function-calling-with-positional-arguments",
    "title": "Function Scope",
    "section": "Function Calling with Positional Arguments",
    "text": "Function Calling with Positional Arguments\n\n\nfrom typing import Union\n\ndef divide(denominator: int, numerator: int, decimal_flag: bool) -&gt; Union[float, str]:\n    if decimal_flag:\n        return numerator/denominator\n    return f\"{numerator//denominator} R {numerator % denominator}\"\n\nresult_decimal = divide(15, 31, True)\nprint(result_decimal)\n\nresult_non_decimal = divide(15, 31, False)\nprint(result_non_decimal)\n\nresult_misleading = divide(True, 15, 31)\nprint(result_misleading)\n\n\n\n2.066666666666667\n2 R 1\n15.0\n\n\n\n\nOrder of parameters matters!\nThe python interpreter assumes that what you supply first should be assigned to the first formal parameter, etc."
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-with-keyword",
    "href": "slides/07-function-scope.html#function-calling-with-keyword",
    "title": "Function Scope",
    "section": "Function Calling with Keyword",
    "text": "Function Calling with Keyword\n\n\nOrder of parameters does not matter when keywords are used\nkeywords help label what is what\n\n“…which one was the denominator again….?”"
  },
  {
    "objectID": "slides/07-function-scope.html#function-calling-with-keyword-1",
    "href": "slides/07-function-scope.html#function-calling-with-keyword-1",
    "title": "Function Scope",
    "section": "Function Calling with Keyword",
    "text": "Function Calling with Keyword\n\nfrom typing import Union\n\ndef divide(denominator: int, numerator: int, decimal_flag: bool) -&gt; Union[float, str]:\n    if decimal_flag:\n        return numerator/denominator\n    return f\"{numerator//denominator} R {numerator % denominator}\"\n\nresult_decimal = divide(decimal_flag=True, denominator=15, numerator=31)\nprint(result_decimal)\n\nresult_misleading = divide(True, 15, 31)\nprint(result_misleading)\n\n\n\n2.066666666666667\n15.0\n\n\n\n\nline 8 passes Keyword arguments decimal_flag=True, numerator=16, denominator=30 inside ( )\n\ndecimal_flag is a formal parameter that was used in the function definition\nnumerator is a formal parameter that was used in the function definition\ndenominator is a formal parameter that was used in the function definition\nTrue gets assigned to decimal_flag\n16 gets assigned to numerator\n30 gest assigned to denominator"
  },
  {
    "objectID": "slides/07-function-scope.html#functions-with-default-values",
    "href": "slides/07-function-scope.html#functions-with-default-values",
    "title": "Function Scope",
    "section": "Functions with Default Values",
    "text": "Functions with Default Values\n\nfrom typing import Union\n\ndef divide(denominator: int, numerator: int, decimal_flag: bool = False) -&gt; Union[float, str]:\n    if decimal_flag:\n        return numerator/denominator\n    return f\"{numerator//denominator} R {numerator % denominator}\"\n\nresult_keyword = divide(numerator=31, denominator=15)\nprint(result_keyword)\n\nresult_positional = divide(15, 31)\nprint(result_positional)\n\n\n\n2 R 1\n2 R 1\n\n\n\n\nline 8 and 11 do not specify the decimal_flag\n\ndecimal_flag has a default value of False in the function signature\nUnless otherwise specified, the default will be used"
  },
  {
    "objectID": "slides/07-function-scope.html#keyword-arguments-positional-arguments-default-values-summary",
    "href": "slides/07-function-scope.html#keyword-arguments-positional-arguments-default-values-summary",
    "title": "Function Scope",
    "section": "Keyword Arguments, Positional Arguments, Default Values Summary",
    "text": "Keyword Arguments, Positional Arguments, Default Values Summary\n\n\nPositional Arguments must be supplied matching the order of the formal parameters in the function signature\nKeyword Arguments can be out of order\nParameters with Default Values do not need to be supplied"
  },
  {
    "objectID": "slides/07-function-scope.html#global-scope",
    "href": "slides/07-function-scope.html#global-scope",
    "title": "Function Scope",
    "section": "Global Scope",
    "text": "Global Scope\n\n\nvariables that are not inside of functions are global\nthis means they can be accessed anywhere in the code, even inside of functions\n\n\n\n\nthis_is_global = \"hello\""
  },
  {
    "objectID": "slides/07-function-scope.html#function-scope",
    "href": "slides/07-function-scope.html#function-scope",
    "title": "Function Scope",
    "section": "Function Scope",
    "text": "Function Scope\n\n\nvariables that are created inside of functions are local to the function, NOT global\nthis means they cannot be accessed outside of the function\n\n\n\n\nthis_is_global = \"hello\"\n\ndef my_function() -&gt; str:\n    this_is_local_to_function = \"hello\"\n    if this_is_local_to_function == this_is_global:\n        return \"the global variable was accessible in the function!\"\n\nfunction_result = my_function()\nprint(f\"function_result is {function_result}\")\n\n\n\nfunction_result is the global variable was accessible in the function!"
  },
  {
    "objectID": "slides/07-function-scope.html#function-scope-1",
    "href": "slides/07-function-scope.html#function-scope-1",
    "title": "Function Scope",
    "section": "Function Scope",
    "text": "Function Scope\n\nThis code crashes\n\n\nthis_is_global = \"hello\"\n\ndef my_function() -&gt; str:\n    this_is_local_to_function = \"hello\"\n    if this_is_local_to_function == this_is_global:\n        return \"the global variable was accessible in the function!\"\n\nfunction_result = my_function()\nprint(f\"function_result is {function_result}\")\n\nprint(this_is_local_to_function)\n\n\n\ntry it!"
  },
  {
    "objectID": "slides/07-function-scope.html#function-scope-2",
    "href": "slides/07-function-scope.html#function-scope-2",
    "title": "Function Scope",
    "section": "Function Scope",
    "text": "Function Scope\n\n\nWhen a function is called, it is executed in a temporary isolated environment called a stack frame\nVariables that are defined inside a function are only known within the stack frame!\nAfter a function is done running, the stack frame is popped, i.e. it disappears\n\nit’s variables will not be known to the outside world!\n\nThe best way to make a function variable available to the outside world is to return it"
  },
  {
    "objectID": "slides/07-function-scope.html#function-scope-3",
    "href": "slides/07-function-scope.html#function-scope-3",
    "title": "Function Scope",
    "section": "Function Scope",
    "text": "Function Scope\nQuestion\n\n\nif the stack frame of an executing function forms a barrier with the outside world, how does it know what the actual parameter is?\n\n\nAnswer\n\n\nthe values of the actual parameters are assigned to the formal parameters by the python interpreter!\nyou can think of it like this: formal_param = actual_param\n\nthe binding is done by assignment with the ="
  },
  {
    "objectID": "slides/07-function-scope.html#scope-summary",
    "href": "slides/07-function-scope.html#scope-summary",
    "title": "Function Scope",
    "section": "Scope Summary",
    "text": "Scope Summary\n\n\nVariables not inside a function are in the global scope\nVariables defined inside a function are in the function scope\nThe python interpreter knows what scope it is in as it executes code!\nFunctions are executed in their own stack frame"
  },
  {
    "objectID": "slides/07-function-scope.html#tracing-execution",
    "href": "slides/07-function-scope.html#tracing-execution",
    "title": "Function Scope",
    "section": "Tracing Execution",
    "text": "Tracing Execution\n\n\nTracing the path that the interpreter takes though code is informative for understanding why scope matters.\nThe interpreter goes line by line to things that it can execute!\nIt will jump around when it encounters loops and conditional branching\nFunctions are NOT executed until the function is called"
  },
  {
    "objectID": "slides/07-function-scope.html#tracing-execution-1",
    "href": "slides/07-function-scope.html#tracing-execution-1",
    "title": "Function Scope",
    "section": "Tracing Execution",
    "text": "Tracing Execution\n\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nx = 4\nresult = prime_test_exhaustive(x)\nprint(result)\n\n\n\nFalse\n\n\n\n\n\n\nTODO: Trace the code below\n\n\n\n\n\nstep\nline #\nscope\nvar names\nvalues\n\n\n\n\n1\n?\n?\n?\n?\n\n\n2\n?\n?\n?\n?\n\n\netc\n?\n?\n?\n?"
  },
  {
    "objectID": "slides/07-function-scope.html#tracing-execution-2",
    "href": "slides/07-function-scope.html#tracing-execution-2",
    "title": "Function Scope",
    "section": "Tracing Execution",
    "text": "Tracing Execution\n\ndef prime_test_exhaustive(x: int) -&gt; bool:\n  \"\"\"Determine if positive input is prime, returning true for prime and false for not prime.\"\"\"\n  if x &lt;= 1:\n    return False\n  if x == 2:\n    return True\n  for guess in range(2, x, 1):\n    if x % guess == 0:\n      return False\n  return True\n\nx = 4\nresult = prime_test_exhaustive(x)\nprint(result)\n\n\n\nFalse\n\n\n\n\n\nstep\nline #\nscope\nvar names\nvalues\n\n\n\n\n1\n12\nG\nx\n4\n\n\n2\n13\nG\nx\n4\n\n\n3\n3\nL\nlocal x\n4\n\n\n4\n5\nL\nlocal x\n4\n\n\n5\n7\nL\nlocal x, local guess\n4, 2\n\n\n6\n8\nL\nlocal x, local guess\n4, 2\n\n\n7\n9\nL\nlocal x, local guess\n4, 2\n\n\n8\n13\nG\nx, result\n4, False\n\n\n9\n14\nG\nx, result\n4, False"
  },
  {
    "objectID": "slides/07-function-scope.html#tracing-execution-2-1",
    "href": "slides/07-function-scope.html#tracing-execution-2-1",
    "title": "Function Scope",
    "section": "Tracing Execution 2",
    "text": "Tracing Execution 2\n\n\nTODO: Trace the code below\n\n\n\n\ndef something_else(x: int) -&gt; bool:\n  \"\"\"Create a situation for scope analysis.\"\"\"\n  x += 1\n  return x + 1\n  \n\nx = 4\nresult = something_else(x + 1)\nprint(f\"result is {result}\")\nprint(f\"x is {x}\")\n\n\n\nresult is 7\nx is 4\n\n\n\n\n\nstep\nline #\nscope\nvar names\nvalues\n\n\n\n\n1\n?\n?\n?\n?\n\n\n2\n?\n?\n?\n?\n\n\netc\n?\n?\n?\n?"
  },
  {
    "objectID": "slides/07-function-scope.html#guttag-example",
    "href": "slides/07-function-scope.html#guttag-example",
    "title": "Function Scope",
    "section": "Guttag Example",
    "text": "Guttag Example\n# how many lines does this code print, and what is the last line printed?\n\ndef f(x):\n    def g():\n        x = 'abc'\n        print(f\"x = {x}\")\n        return\n    def h():\n         z = x\n         print(f\"z = {z}\")\n         return\n    x = x + 1\n    print(f\"x = {x}\")\n    h()\n    g()\n    print(f\"x = {x}\")\n    return g\n\nx = 3\nz = f(x)\nprint(f\"x = {x}\")\nprint(f\"z = {z}\")\nz()"
  },
  {
    "objectID": "slides/07-function-scope.html#execution-summary",
    "href": "slides/07-function-scope.html#execution-summary",
    "title": "Function Scope",
    "section": "Execution Summary",
    "text": "Execution Summary\n\nThe interpreter goes line by line to things that it can execute!\nFunctions are NOT executed until the function is called\nvariables with the same name in different scopes are different variables!\nRefer to Guttag Chapter 4"
  },
  {
    "objectID": "slides/07-function-scope.html#regular-function",
    "href": "slides/07-function-scope.html#regular-function",
    "title": "Function Scope",
    "section": "Regular Function",
    "text": "Regular Function\n\nprint(abs(-10)) # works\nprint(abs([15, -1,-3, 19, -25, -3.1])) # crashes\n\n\nabs is a built-in python function!\nit can only work on one number at a time\ntry it!"
  },
  {
    "objectID": "slides/07-function-scope.html#higher-order-function",
    "href": "slides/07-function-scope.html#higher-order-function",
    "title": "Function Scope",
    "section": "Higher Order Function",
    "text": "Higher Order Function\n\n\nfrom typing import List, Callable\n\ndef apply_to_each(input_list: List, function: Callable) -&gt; List:\n    output_list = []\n    for i in input_list:\n        new_i = function(i)\n        output_list.append(new_i)\n    return output_list\n\nmy_list = [15, -1,-3, 19, -25, -3.1]\nresult = apply_to_each(my_list, abs)\nprint(result)\n\n\n\n[15, 1, 3, 19, 25, 3.1]\n\n\n\n\nline 11, abs is passed in as a parameter to apply_to_each\nnote that ONLY THE FUNCTION NAME was the actual parameter\napply_to_each is a higher-order function because it takes a function as a parameter"
  },
  {
    "objectID": "slides/07-function-scope.html#end",
    "href": "slides/07-function-scope.html#end",
    "title": "Function Scope",
    "section": "End",
    "text": "End"
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Materials",
    "section": "",
    "text": "FINDING YOU REPOSITORIES\n\n\n\nIf you have already accepted the GitHub Classroom assignment, find your repos by navigating to the repositories tab from the course GitHub organization page: https://github.com/orgs/allegheny-college-cmpsc-101-spring-2025/"
  },
  {
    "objectID": "materials.html#software-operations",
    "href": "materials.html#software-operations",
    "title": "Materials",
    "section": "1. Software Operations",
    "text": "1. Software Operations\n\nRequired Reading: Guttag Chapter 1\nSpecification Lab: CLI vs Script vs Notebook (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Jan 28 at 2:30pm\nSlides: Welcome Reveal, PDF\nSlides: Software installation instructions PDF\nSlides: Workflow for 101 labs PDF"
  },
  {
    "objectID": "materials.html#python-foundations",
    "href": "materials.html#python-foundations",
    "title": "Materials",
    "section": "2. Python Foundations",
    "text": "2. Python Foundations\n\nRequired Reading: Guttag Chapter 2\nEngineering Lab: Integer Squaring (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Jan 28 at 2:30pm\nSlides: Linting Reveal\nSlides: Python Foundations Reveal, PDF"
  },
  {
    "objectID": "materials.html#numerical-programs",
    "href": "materials.html#numerical-programs",
    "title": "Materials",
    "section": "3. Numerical Programs",
    "text": "3. Numerical Programs\n\nRequired Reading: Guttag Chapter 3\nMissing Pages\nSpecification Lab: Number Comparison (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Feb 4 at 2:30pm\nSlides: Numerical Computation Reveal, PDF"
  },
  {
    "objectID": "materials.html#function-scope",
    "href": "materials.html#function-scope",
    "title": "Materials",
    "section": "4. Function Scope",
    "text": "4. Function Scope\n\nRequired Reading: Guttag Chapter 4\nSpecification Lab: Square Roots (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Feb 11 at 2:30pm\nSlides: Function Scope Reveal, PDF"
  },
  {
    "objectID": "materials.html#structured-types",
    "href": "materials.html#structured-types",
    "title": "Materials",
    "section": "5. Structured Types",
    "text": "5. Structured Types\n\nRequired Reading: Guttag Chapter 5\nEngineering Lab: Prime Testing (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Feb 18 at 2:30pm\nSlides: Structured Types PDF\nNotebook: Tuples\nNotebook: Lists\nNotebook: Slicing"
  },
  {
    "objectID": "materials.html#mutability-and-aliasing",
    "href": "materials.html#mutability-and-aliasing",
    "title": "Materials",
    "section": "6. Mutability and Aliasing",
    "text": "6. Mutability and Aliasing\n\nRequired Reading: Guttag Chapter 5 Cont.\nSpecification Lab: Structured Types (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Feb 25 at 2:30pm\nSlides: Cloning and Aliasing PDF\nNotebook: Cloning and Aliasing\nCopied Pages: Guttag p100-101"
  },
  {
    "objectID": "materials.html#recursion",
    "href": "materials.html#recursion",
    "title": "Materials",
    "section": "7. Recursion",
    "text": "7. Recursion\n\nRequired Reading: Guttag Chapter 6\nEngineering Lab: Intersection Algorithms (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Mar 4 at 2:30pm\nSpecification Lab: Cloning vs Aliasing (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Mar 11 at 2:30pm\nSlides: Recursion PDF\nNotebook: Recursion"
  },
  {
    "objectID": "materials.html#modules-and-files",
    "href": "materials.html#modules-and-files",
    "title": "Materials",
    "section": "9. Modules and Files",
    "text": "9. Modules and Files\n\nRequired Reading: Guttag Chapter 7\nEngineering Lab: Palindromes (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Mar 18 at 2:30pm\nSlides: Modules PDF\nNotebook: Modules"
  },
  {
    "objectID": "materials.html#testing-and-handling-exceptions",
    "href": "materials.html#testing-and-handling-exceptions",
    "title": "Materials",
    "section": "10. Testing and Handling Exceptions",
    "text": "10. Testing and Handling Exceptions\n\nRequired Reading: Guttag Chapter 8 & 9\nEngineering Lab: Fibonacci Algorithms (40 Points)\nGitHub Classroom Link\nStarter Repo Due Date: Tu Mar 25 at 2:30pm\nSlides: Testing PDF\nNotebook: Testing\nSlides: Exception Handling PDF\nNotebook: Exception Handling"
  },
  {
    "objectID": "materials.html#object-oriented-programming",
    "href": "materials.html#object-oriented-programming",
    "title": "Materials",
    "section": "11. Object-Oriented Programming",
    "text": "11. Object-Oriented Programming\n\nRequired Reading: Guttag Chapter 10\nSpecification Lab: Debugging (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Apr 1 at 2:30pm\nSlides: Classes PDF\nNotebook: Classes\nSlides: Inheritance PDF\nNotebook: Inheritance\nSlides: Object Processing PDF\nNotebook: Object Processing"
  },
  {
    "objectID": "materials.html#algorithmic-complexity",
    "href": "materials.html#algorithmic-complexity",
    "title": "Materials",
    "section": "12. Algorithmic Complexity",
    "text": "12. Algorithmic Complexity\n\nRequired Reading: Guttag Chapter 11\nEngineering Lab: Object Processing (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Apr 8 at 2:30pm\nSlides: Algorithmic Complexity I PDF\nSlides: Algorithmic Complexity II PDF\nNotebook: Worst Case Complexity"
  },
  {
    "objectID": "materials.html#sorting",
    "href": "materials.html#sorting",
    "title": "Materials",
    "section": "13. Sorting",
    "text": "13. Sorting\n\nRequired Reading: Guttag Chapter 12\nEngineering Lab: Containment Checking (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Apr 15 at 2:30pm\nSlides: Sorting PDF\nNotebook: Sorting"
  },
  {
    "objectID": "materials.html#data-structures",
    "href": "materials.html#data-structures",
    "title": "Materials",
    "section": "14. Data Structures",
    "text": "14. Data Structures\n\nRequired Reading: Guttag Chapter 12 Cont.\nEngineering Lab: Sorting Algorithms (40 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Apr 22 at 2:30pm\nSlides: Data Structures PDF\nNotebook: Data Structures"
  },
  {
    "objectID": "materials.html#optimization-problems",
    "href": "materials.html#optimization-problems",
    "title": "Materials",
    "section": "15. Optimization Problems",
    "text": "15. Optimization Problems\n\nRequired Reading: Guttag Chapter 14\nSpecification Lab: Matrix Processing (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: Tu Apr 29 at 2:30pm"
  },
  {
    "objectID": "materials.html#knapsack-solver",
    "href": "materials.html#knapsack-solver",
    "title": "Materials",
    "section": "16. Knapsack Solver",
    "text": "16. Knapsack Solver\n\nSpecification Lab: Knapsack Solver (20 Points)\nGitHub Classroom Link & Starter Repo Due Date: May 6 at 11:59 pm"
  },
  {
    "objectID": "materials.html#final-optional",
    "href": "materials.html#final-optional",
    "title": "Materials",
    "section": "Final (Optional)",
    "text": "Final (Optional)\n\nThursday, May 1, 2025 9:00 AM to noon - Extra Lab Session to complete Knapsack Solver Lab."
  }
]