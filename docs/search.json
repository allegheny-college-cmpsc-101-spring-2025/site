[
  {
    "objectID": "discord.html",
    "href": "discord.html",
    "title": "Discord Channel",
    "section": "",
    "text": "First time only, use the invite link here\nAccess the Data Structures Discord Channel here"
  },
  {
    "objectID": "discord.html#announcements",
    "href": "discord.html#announcements",
    "title": "Discord Channel",
    "section": "Announcements",
    "text": "Announcements\n\n\n\nMade with https://docs.widgetbot.io/"
  },
  {
    "objectID": "slides/04-python-foundations.html#goals",
    "href": "slides/04-python-foundations.html#goals",
    "title": "Python Foundations",
    "section": "Goals",
    "text": "Goals\n\nReview Python literals\nReview Python variables and operators\nReview Python loops and conditionals\nReview Python squaring algorithms\nReview Python strings and slicing"
  },
  {
    "objectID": "slides/04-python-foundations.html#string",
    "href": "slides/04-python-foundations.html#string",
    "title": "Python Foundations",
    "section": "String",
    "text": "String\n\nprint(\"Hello\")\nprint(type(\"Hello\"))\n\n\n\nHello\n&lt;class 'str'&gt;\n\n\n\nTODO: print your name below"
  },
  {
    "objectID": "slides/04-python-foundations.html#integer",
    "href": "slides/04-python-foundations.html#integer",
    "title": "Python Foundations",
    "section": "Integer",
    "text": "Integer\n\nprint(101)\nprint(type(101))\n\n\n\n101\n&lt;class 'int'&gt;\n\n\n\nTODO: print an integer literal that is negative"
  },
  {
    "objectID": "slides/04-python-foundations.html#float",
    "href": "slides/04-python-foundations.html#float",
    "title": "Python Foundations",
    "section": "Float",
    "text": "Float\n\nprint(101.1)\nprint(type(101.1))\n\n\n\n101.1\n&lt;class 'float'&gt;\n\n\n\nTODO: print a float literal that is negative"
  },
  {
    "objectID": "slides/04-python-foundations.html#boolean",
    "href": "slides/04-python-foundations.html#boolean",
    "title": "Python Foundations",
    "section": "Boolean",
    "text": "Boolean\n\nprint(True)\nprint(type(True))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\nTODO: print a boolean literal that is not True"
  },
  {
    "objectID": "slides/04-python-foundations.html#list",
    "href": "slides/04-python-foundations.html#list",
    "title": "Python Foundations",
    "section": "List",
    "text": "List\n\nprint([False, -12, -34.1, \"literals!\"])\nprint(type([False, -12, -34.1, \"literals!\"]))\n\n\n\n[False, -12, -34.1, 'literals!']\n&lt;class 'list'&gt;\n\n\n\nTODO: print a list literal that has 3 integers"
  },
  {
    "objectID": "slides/04-python-foundations.html#tuple",
    "href": "slides/04-python-foundations.html#tuple",
    "title": "Python Foundations",
    "section": "Tuple",
    "text": "Tuple\n\nprint((False, -12, -34.1, \"literals!\"))\nprint(type((False, -12, -34.1, \"literals!\")))\n\n\n\n(False, -12, -34.1, 'literals!')\n&lt;class 'tuple'&gt;\n\n\n\nTODO: print a tuple literal that has 3 floats"
  },
  {
    "objectID": "slides/04-python-foundations.html#assignment",
    "href": "slides/04-python-foundations.html#assignment",
    "title": "Python Foundations",
    "section": "Assignment",
    "text": "Assignment\n\na = [False, -12, -34.1, \"assignment!\"]\nprint(a)\nprint(type(a))\n\n\n\n[False, -12, -34.1, 'assignment!']\n&lt;class 'list'&gt;\n\n\n\n\n[False, -12, -34.1, \"assignment!\"] is the object in memory\na is the variable name given to the object\n= operator used\nvariable name always goes on the left hand side of ="
  },
  {
    "objectID": "slides/04-python-foundations.html#arithmetic",
    "href": "slides/04-python-foundations.html#arithmetic",
    "title": "Python Foundations",
    "section": "Arithmetic",
    "text": "Arithmetic\n\nitem1 = 100\nitem2 = 11\naddition_ex = item1 + item2\nmult_ex = item1 * item2\ndiv_ex = item1 / item2\nfloor_div_ex = item1 // item2\npower_ex = item2 ** 2\nmod_ex = item2 % 7 \n\nprint(f\"addition_ex is {addition_ex}\")\nprint(f\"mult_ex is {mult_ex}\")\nprint(f\"div_ex is {div_ex}\")\nprint(f\"floor_div_ex is {floor_div_ex}\")\nprint(f\"power_ex is {power_ex}\")\nprint(f\"mod_ex is {mod_ex}\")\n\n\n\naddition_ex is 111\nmult_ex is 1100\ndiv_ex is 9.090909090909092\nfloor_div_ex is 9\npower_ex is 121\nmod_ex is 4"
  },
  {
    "objectID": "slides/04-python-foundations.html#comparison",
    "href": "slides/04-python-foundations.html#comparison",
    "title": "Python Foundations",
    "section": "Comparison",
    "text": "Comparison\n\nitem1 = 100\nitem2 = 11\ngt = item1 &gt; item2\nlt = item1 &lt; item2\ngte = item1 &gt;= item2\nlte = item1 &lt;= item2\nequal = item1 == item2\nnot_equal = item1 != item2\n\nprint(f\"item1 &gt; item2 is {gt}\")\nprint(f\"item1 &lt; item2 is {lt}\")\nprint(f\"item1 &gt;= item2 is {gte}\")\nprint(f\"item1 &lt;= item2 is {lte}\")\nprint(f\"item1 == item2 is {equal}\")\nprint(f\"item1 != item2 is {not_equal}\")\n\n\n\nitem1 &gt; item2 is True\nitem1 &lt; item2 is False\nitem1 &gt;= item2 is True\nitem1 &lt;= item2 is False\nitem1 == item2 is False\nitem1 != item2 is True"
  },
  {
    "objectID": "slides/04-python-foundations.html#for-loop",
    "href": "slides/04-python-foundations.html#for-loop",
    "title": "Python Foundations",
    "section": "For Loop",
    "text": "For Loop\n\nfor i in range(10):\n    print(i)\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"
  },
  {
    "objectID": "slides/04-python-foundations.html#for-loop-1",
    "href": "slides/04-python-foundations.html#for-loop-1",
    "title": "Python Foundations",
    "section": "For Loop",
    "text": "For Loop\n\nfor i in range(10):\n    print(i)\n\nTODO: Write a for loop to print out the square root of every even integer between 2 and 64, including 64"
  },
  {
    "objectID": "slides/04-python-foundations.html#while-loop",
    "href": "slides/04-python-foundations.html#while-loop",
    "title": "Python Foundations",
    "section": "While Loop",
    "text": "While Loop\n\ni = 0\nwhile i &lt; 10:\n    print(i)\n    i += 1\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"
  },
  {
    "objectID": "slides/04-python-foundations.html#while-loop-1",
    "href": "slides/04-python-foundations.html#while-loop-1",
    "title": "Python Foundations",
    "section": "While Loop",
    "text": "While Loop\n\ni = 0\nwhile i &lt; 10:\n    print(i)\n    i += 1\n\nTODO: What happens if you forget to increment the counter?"
  },
  {
    "objectID": "slides/04-python-foundations.html#conditional",
    "href": "slides/04-python-foundations.html#conditional",
    "title": "Python Foundations",
    "section": "Conditional",
    "text": "Conditional\n\ni = 0\nwhile i &lt; 10:\n    if i % 2 == 1:\n        print(f\"{i} is odd!\")\n    elif i % 3 == 0:\n        print(f\"{i} is divisible by 3!\")\n    i += 1\n\n\n\n0 is divisible by 3!\n1 is odd!\n3 is odd!\n5 is odd!\n6 is divisible by 3!\n7 is odd!\n9 is odd!"
  },
  {
    "objectID": "slides/04-python-foundations.html#conditional-1",
    "href": "slides/04-python-foundations.html#conditional-1",
    "title": "Python Foundations",
    "section": "Conditional",
    "text": "Conditional\nTODO: Write one loop that prints “fizz” for every even number, “buzz” for every multiple of 5, and “fizzbuzz” for even multiples of 5 for integers from 0 to 20 including 20."
  },
  {
    "objectID": "slides/04-python-foundations.html#square-by-addition-in-a-for-loop",
    "href": "slides/04-python-foundations.html#square-by-addition-in-a-for-loop",
    "title": "Python Foundations",
    "section": "Square by Addition in a For Loop",
    "text": "Square by Addition in a For Loop\n\n# choose a value to square\nvalue = 6\n# initialize the answer\nanswer = 0\n# repeatedly increase the answer until getting to the value\nfor _ in range(value):\n    answer += value    \n# print the computed integer squared using a for loop\nprint(f\"{value} squared is {answer}\")\n\n\n\n6 squared is 36"
  },
  {
    "objectID": "slides/04-python-foundations.html#square-by-addition-in-a-while-loop",
    "href": "slides/04-python-foundations.html#square-by-addition-in-a-while-loop",
    "title": "Python Foundations",
    "section": "Square by Addition in a While Loop",
    "text": "Square by Addition in a While Loop\n\n# choose a value to square\nvalue = 7\n# initialize the number of iterations and the answer\ni = 0\nanswer = 0\n# repeatedly increase the answer until getting to the value\nwhile i &lt; value:\n    answer += value\n    i += 1    \n# print the computed integer squared using a while loop\nprint(f\"{value} squared is {answer}\")\n\n\n\n7 squared is 49"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function-1",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function-1",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer\n\n\n\n\nNotice:\n\nkeyword def\nindentation\ntype annotations for input and output : int and -&gt; int\ndocstring \"\"\"Square...\"\"\"\nreturn statement return\n\nTODO: Copy and run it! Why didn’t anything print?"
  },
  {
    "objectID": "slides/04-python-foundations.html#abstracting-to-a-function-2",
    "href": "slides/04-python-foundations.html#abstracting-to-a-function-2",
    "title": "Python Foundations",
    "section": "Abstracting to a Function",
    "text": "Abstracting to a Function\n\n# choose a value to square\ndef square_by_addition_while(value: int) -&gt; int:\n    \"\"\"Square a number by addition in a while loop.\"\"\"\n    # initialize the number of iterations and the answer\n    i = 0\n    answer = 0\n    # repeatedly increase the answer until getting to the value\n    while i &lt; value:\n        answer += value\n        i += 1    \n    # return the computed integer squared using a while loop\n    return answer\n\nmy_value = 12\nmy_answer = square_by_addition_while(my_value)\nprint(f\"{my_value} squared is {my_answer}\")\n\n\n\n12 squared is 144\n\n\n\nTODO: What happens if you try to print print(f\"{value} squared is {answer}\")? Clear, then copy the code below, and run it."
  },
  {
    "objectID": "slides/04-python-foundations.html#formatted-strings",
    "href": "slides/04-python-foundations.html#formatted-strings",
    "title": "Python Foundations",
    "section": "Formatted Strings",
    "text": "Formatted Strings\n\nvalue = 12345\nformatted_string = f\"the value is {value}\"\nprint(formatted_string)\n\n\n\nthe value is 12345"
  },
  {
    "objectID": "slides/04-python-foundations.html#slicing",
    "href": "slides/04-python-foundations.html#slicing",
    "title": "Python Foundations",
    "section": "Slicing",
    "text": "Slicing\n\nvalue = 12345\nformatted_string = f\"the value is {value}\"\nprint(formatted_string)\nprint(formatted_string[4:14:1])\n\n\n\nthe value is 12345\nvalue is 1\n\n\n\nThe indices are the starting point, the end point (non-inclusive), the hop"
  },
  {
    "objectID": "slides/04-python-foundations.html#find-further-review-in-chapter-2",
    "href": "slides/04-python-foundations.html#find-further-review-in-chapter-2",
    "title": "Python Foundations",
    "section": "Find Further Review in Chapter 2",
    "text": "Find Further Review in Chapter 2"
  },
  {
    "objectID": "slides/03-linting.html#goals",
    "href": "slides/03-linting.html#goals",
    "title": "Linting",
    "section": "Goals",
    "text": "Goals\n\nDefine linting\nReview linting errors\nReview linting solutions"
  },
  {
    "objectID": "slides/03-linting.html#linting-definition",
    "href": "slides/03-linting.html#linting-definition",
    "title": "Linting",
    "section": "Linting Definition",
    "text": "Linting Definition\n\nLinting highlights semantic and stylistic problems in your Python source code, which often helps you identify and correct subtle programming errors or coding practices that can lead to errors. For example, linting can detect the use of an undefined variable, calls to undefined functions, missing parentheses, and even more subtle issues such as attempting to redefine built-in types or functions.\n\n\nhttps://code.visualstudio.com/docs/python/linting"
  },
  {
    "objectID": "slides/03-linting.html#stylistic-errors-in-english",
    "href": "slides/03-linting.html#stylistic-errors-in-english",
    "title": "Linting",
    "section": "Stylistic Errors in English",
    "text": "Stylistic Errors in English\nhI , mY nAME    is Emily .   .\n\n\n1:1 The first letter of the first word should be capitalized\n1:2 Inner letters should not be capitalized\n1:3 Found white space before a comma, expected none\n1:7 Inner letters should not be capitalized\n1:10 Inner letters should not be capitalized\n1:13 Found white space before a word, expected one white space\n1:25 Found white space before a period, expected none\n1:29 Found two periods, expected one"
  },
  {
    "objectID": "slides/03-linting.html#stylistic-errors-in-code",
    "href": "slides/03-linting.html#stylistic-errors-in-code",
    "title": "Linting",
    "section": "Stylistic Errors in Code",
    "text": "Stylistic Errors in Code\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruff\ncli/main.py:1:1: D400 First line should end with a period\ncli/main.py:1:1: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:10:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:11:5: D400 First line should end with a period\ncli/main.py:11:5: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:17:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:18:5: D400 First line should end with a period\ncli/main.py:18:5: D415 First line should end with a period, question mark, or exclamation point\ncli/main.py:22:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:29:1: E302 [*] Expected 2 blank lines, found 1\ncli/main.py:33:5: D202 [*] No blank lines allowed after function docstring (found 1)\ncli/main.py:49:15: F541 [*] f-string without any placeholders\ncli/main.py:54:9: E303 [*] Too many blank lines (2)\ncli/main.py:59:9: E303 [*] Too many blank lines (2)\ncli/main.py:64:9: E303 [*] Too many blank lines (2)\ncli/main.py:69:9: E303 [*] Too many blank lines (2)\ncli/main.py:74:9: E303 [*] Too many blank lines (2)\ncli/main.py:82:1: W391 [*] Too many newlines at end of file\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:1:1: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:1:1: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:5:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:6:5: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:6:5: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:12:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:13:5: D400 First line should end with a period\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:13:5: D415 First line should end with a period, question mark, or exclamation point\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:17:1: E302 [*] Expected 2 blank lines, found 1\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:42:15: F541 [*] f-string without any placeholders\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:51:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:56:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:61:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:66:9: E303 [*] Too many blank lines (2)\n/Users/egraber/Documents/Teaching/generic-labs-101/cli-vs-script-starter/script/main.py:74:1: W391 [*] Too many newlines at end of file\nFound 33 errors.\n[*] 21 fixable with the `--fix` option (12 hidden fixes can be enabled with the `--unsafe-fixes` option)."
  },
  {
    "objectID": "slides/03-linting.html#read-slowly",
    "href": "slides/03-linting.html#read-slowly",
    "title": "Linting",
    "section": "Read Slowly",
    "text": "Read Slowly\ncli/main.py:1:1: D400 First line should end with a period\n\n\ncli/main.py is the file\n1:1 is the line number : character number\nD400 ignore this for now\nFirst line should end with a period message explaining the issue\nSolution:\n\nGo the location indicated\nread your code at and around the area\ntry to fix the issue"
  },
  {
    "objectID": "slides/03-linting.html#fixing",
    "href": "slides/03-linting.html#fixing",
    "title": "Linting",
    "section": "Fixing",
    "text": "Fixing\nOriginal:\n\"\"\"a variety of numerical operations based on the value of an option to the CLI\"\"\"\nCorrected:\n\"\"\"Do a variety of numerical operations based on the value of an option to the CLI.\"\"\""
  },
  {
    "objectID": "slides/03-linting.html#linting-commands",
    "href": "slides/03-linting.html#linting-commands",
    "title": "Linting",
    "section": "Linting Commands",
    "text": "Linting Commands\n\npoetry run task ruff\n\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruff\ncli/main.py:1:1: D400 First line should end with a period\n\npoetry run task ruffdetails\n\negraber ~/Documents/Teaching/generic-labs-101/cli-vs-script-starter/cli % 🦚🦚🦚 poetry run task ruffdetails\ncli/main.py:1:1: D400 First line should end with a period\n  |\n1 | \"\"\"a variety of numerical operations based on the value of an option to the CLI\"\"\"\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400\n2 | \n3 | # TODO: add at least ten single-line comments to this file to describe individual line of code.\n  |\n  = help: Add period"
  },
  {
    "objectID": "slides/03-linting.html#automatic-fixes",
    "href": "slides/03-linting.html#automatic-fixes",
    "title": "Linting",
    "section": "Automatic fixes",
    "text": "Automatic fixes\n\npoetry run task fix\nor\npoetry run ruff --fix"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "",
    "text": "Class Sessions: MWF 9:00 AM-9:50 AM, Alden 101\nLaboratory Session: Tu, 2:30 PM-4 PM, Alden 101\nInstructor: Professor Emily Graber, egraber@allegheny.edu\nOffice Location: Alden Hall 106\nInstructor Office Hours: Visit Google Calendar to reserve an appointment as needed."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "index.html#course-learning-objectives",
    "href": "index.html#course-learning-objectives",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Materials",
    "text": "Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nCourse Website\nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs\nProactive Programmers\n\n\n\nRequired Software and Accounts\n\nSublime Text 4\nPython 3.12\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nGoogle Account"
  },
  {
    "objectID": "index.html#course-components",
    "href": "index.html#course-components",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Components",
    "text": "Course Components\nThere are five main components that contribute to the grade in this course.\n\nSpecifications Labs: Generally shorter labs to be started in lab session and completed outside of class. Graded pass/fail and falling in the remember, understand, and apply categories of Bloom’s Taxonomy.\nEngineering Labs: Generally longer labs to be started in lab session and completed outside of class. Graded by percentage with rubric and falling in the analyze, evaluate, and create categories of Bloom’s Taxonomy.\nQuizzes: Questions to be answered in person or through forms online or on paper about recently materials, including labs.\nParticipation: Demonstration of effective and collaborative communication in Discord by asking or answering questions weekly. Completion of reading and reading reports.\nAttendance. See section below.\n\n\n\n\nBlooms Taxonomy\n\n\n\nGrading\nThe components described above will be weighted as shown in the table below. Please note that attendance is also required, and attendance policies affect grades. Adjustments to grades will be applied on top of base grades according to policy.\n\n\n\nCategory\nPercentage\n\n\n\n\nQuizzes (14)\n20\n\n\nParticipation\n20\n\n\nSpec Labs (8)\n20\n\n\nEngineering Labs (8)\n40"
  },
  {
    "objectID": "index.html#schedule-at-a-glance",
    "href": "index.html#schedule-at-a-glance",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Jan 13: Software Operations (Guttag Chapter 1)\nWeek Two: Jan 22: Python Foundations (Guttage Chapter 2)\nWeek Three: Jan 27: Numerical Programs (Guttag Chapter 3)\nWeek Four: Feb 3: Function Scope (Guttag Chapter 4)\nWeek Five: Feb 10: Structured Types (Guttag Chapter 5)\nWeek Six: Feb 17: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Feb 24: Recursion (Guttag Chapter 6)\nSpring Break\nWeek Nine: March 10: Modules and Files (Guttag Chapter 7)\nWeek Ten: March 17: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Eleven: March 24: Object-Oriented Programming (Guttag Chapter 10)\nWeek Twelve: March 31: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: April 7: Data Structures (Guttag Chapter 12)\nWeek Fourteen: April 14: Data Structures Continued (Guttag Chapter 12)\nWeek Fifteen: April 21: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: April 28: Review\n\n\nFinal\n\nThursday, May 1, 2025 at 9:00 AM (Complete Final Exam Schedule)"
  },
  {
    "objectID": "index.html#assignment-policies",
    "href": "index.html#assignment-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time.\nDue dates will be stated in the Assignment Deadline Schedule and Discord. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\n\n\nAssignment Evaluation\nYou will privately receive a grade for each assignment in Canvas. Your grade will be a function of whether or not you completed the work that correctly fulfills the assignment’s specification and submitted it by the deadline.\nEngineering Labs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Engineering Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nSpec Labs are graded based only on the gatorgrade score. A gatorgrade score of 93% on a given spec lab will result in a grade of 93% for that lab."
  },
  {
    "objectID": "index.html#quiz-policies",
    "href": "index.html#quiz-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Quiz Policies",
    "text": "Quiz Policies\nQuizzes on previously-covered or assigned materials are given in class, typically on the day following lab.\nIn case you are absent on a day when there is a quiz, you can make it up in any instructor office hours slot within one week. Reach out if the office hours time slots do not work for you."
  },
  {
    "objectID": "index.html#additional-policies",
    "href": "index.html#additional-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have five absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and five excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the final exam.\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "index.html#communications",
    "href": "index.html#communications",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "index.html#honor-code",
    "href": "index.html#honor-code",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "index.html#educational-accommodations",
    "href": "index.html#educational-accommodations",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "index.html#syllabus-changes",
    "href": "index.html#syllabus-changes",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  },
  {
    "objectID": "syll/syllabus.html",
    "href": "syll/syllabus.html",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "",
    "text": "Class Sessions: MWF 9:00 AM-9:50 AM, Alden 101\nLaboratory Session: Tu, 2:30 PM-4 PM, Alden 101\nInstructor: Professor Emily Graber, egraber@allegheny.edu\nOffice Location: Alden Hall 106\nInstructor Office Hours: Visit Google Calendar to reserve an appointment as needed."
  },
  {
    "objectID": "syll/syllabus.html#course-description",
    "href": "syll/syllabus.html#course-description",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "syll/syllabus.html#course-learning-objectives",
    "href": "syll/syllabus.html#course-learning-objectives",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "syll/syllabus.html#materials",
    "href": "syll/syllabus.html#materials",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Materials",
    "text": "Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nCourse Website\nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs\nProactive Programmers\n\n\n\nRequired Software and Accounts\n\nSublime Text 4\nPython 3.12\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nGoogle Account"
  },
  {
    "objectID": "syll/syllabus.html#course-components",
    "href": "syll/syllabus.html#course-components",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Course Components",
    "text": "Course Components\nThere are five main components that contribute to the grade in this course.\n\nSpecifications Labs: Generally shorter labs to be started in lab session and completed outside of class. Graded pass/fail and falling in the remember, understand, and apply categories of Bloom’s Taxonomy.\nEngineering Labs: Generally longer labs to be started in lab session and completed outside of class. Graded by percentage with rubric and falling in the analyze, evaluate, and create categories of Bloom’s Taxonomy.\nQuizzes: Questions to be answered in person or through forms online or on paper about recently materials, including labs.\nParticipation: Demonstration of effective and collaborative communication in Discord by asking or answering questions weekly. Completion of reading and reading reports.\nAttendance. See section below.\n\n\n\n\nBlooms Taxonomy\n\n\n\nGrading\nThe components described above will be weighted as shown in the table below. Please note that attendance is also required, and attendance policies affect grades. Adjustments to grades will be applied on top of base grades according to policy.\n\n\n\nCategory\nPercentage\n\n\n\n\nQuizzes (14)\n20\n\n\nParticipation\n20\n\n\nSpec Labs (8)\n20\n\n\nEngineering Labs (8)\n40"
  },
  {
    "objectID": "syll/syllabus.html#schedule-at-a-glance",
    "href": "syll/syllabus.html#schedule-at-a-glance",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Jan 13: Software Operations (Guttag Chapter 1)\nWeek Two: Jan 22: Python Foundations (Guttage Chapter 2)\nWeek Three: Jan 27: Numerical Programs (Guttag Chapter 3)\nWeek Four: Feb 3: Function Scope (Guttag Chapter 4)\nWeek Five: Feb 10: Structured Types (Guttag Chapter 5)\nWeek Six: Feb 17: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Feb 24: Recursion (Guttag Chapter 6)\nSpring Break\nWeek Nine: March 10: Modules and Files (Guttag Chapter 7)\nWeek Ten: March 17: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Eleven: March 24: Object-Oriented Programming (Guttag Chapter 10)\nWeek Twelve: March 31: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: April 7: Data Structures (Guttag Chapter 12)\nWeek Fourteen: April 14: Data Structures Continued (Guttag Chapter 12)\nWeek Fifteen: April 21: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: April 28: Review\n\n\nFinal\n\nThursday, May 1, 2025 at 9:00 AM (Complete Final Exam Schedule)"
  },
  {
    "objectID": "syll/syllabus.html#assignment-policies",
    "href": "syll/syllabus.html#assignment-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time.\nDue dates will be stated in the Assignment Deadline Schedule and Discord. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\n\n\nAssignment Evaluation\nYou will privately receive a grade for each assignment in Canvas. Your grade will be a function of whether or not you completed the work that correctly fulfills the assignment’s specification and submitted it by the deadline.\nEngineering Labs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Engineering Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nSpec Labs are graded based only on the gatorgrade score. A gatorgrade score of 93% on a given spec lab will result in a grade of 93% for that lab."
  },
  {
    "objectID": "syll/syllabus.html#quiz-policies",
    "href": "syll/syllabus.html#quiz-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Quiz Policies",
    "text": "Quiz Policies\nQuizzes on previously-covered or assigned materials are given in class, typically on the day following lab.\nIn case you are absent on a day when there is a quiz, you can make it up in any instructor office hours slot within one week. Reach out if the office hours time slots do not work for you."
  },
  {
    "objectID": "syll/syllabus.html#additional-policies",
    "href": "syll/syllabus.html#additional-policies",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have five absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and five excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the final exam.\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "syll/syllabus.html#communications",
    "href": "syll/syllabus.html#communications",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "syll/syllabus.html#honor-code",
    "href": "syll/syllabus.html#honor-code",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "syll/syllabus.html#educational-accommodations",
    "href": "syll/syllabus.html#educational-accommodations",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "syll/syllabus.html#syllabus-changes",
    "href": "syll/syllabus.html#syllabus-changes",
    "title": "Syllabus: CMPSC 101.00 Data Structures, Spring 2025",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  },
  {
    "objectID": "code/temp.html",
    "href": "code/temp.html",
    "title": "Data Structures",
    "section": "",
    "text": "Open In Colab\n\n\nThis is a test notebook file\nprint(\"trying to get live code block inside the python notebook\")\n\n\nCode\nprint(\"hello\")\nprint(\"line 2\")\nprint(\"line 3\")\nprint(\"line 4\")\n\n\nhello\nline 2\nline 3\nline 4\n\n\n\n\nCode\nprint(\"this is another print message\")\n\n\nthis is another print message"
  },
  {
    "objectID": "grades.html",
    "href": "grades.html",
    "title": "Grades",
    "section": "",
    "text": "Please check Canvas for your grades here.\nFor detailed discussion of grades, please attend office hours"
  },
  {
    "objectID": "slides/01-welcome.html#cmpsc-101---data-structures",
    "href": "slides/01-welcome.html#cmpsc-101---data-structures",
    "title": "Welcome to CMPSC 101",
    "section": "CMPSC 101 - Data Structures",
    "text": "CMPSC 101 - Data Structures\nSpring 2025\nM/W/F 9-9:50am\nTu 2:30-4pm\nAlden 101"
  },
  {
    "objectID": "slides/01-welcome.html#where-are-we",
    "href": "slides/01-welcome.html#where-are-we",
    "title": "Welcome to CMPSC 101",
    "section": "Where are we?",
    "text": "Where are we?\n\n\nDepartment of Computer and Information Science\nFour Majors/Minors\n\nComputer Science\nData Science\nInformatics\nSoftware Engineering\n\nCommon Doubles\n\nArt, Science, and Innovation\nEconomics"
  },
  {
    "objectID": "slides/01-welcome.html#what-is-this-course-about",
    "href": "slides/01-welcome.html#what-is-this-course-about",
    "title": "Welcome to CMPSC 101",
    "section": "What is this course about?",
    "text": "What is this course about?\n\n\nbreaking apart complex problems\norganizing all subproblems\ncalculating solutions to subproblems with algorithm\nstoring and structuring the calculations"
  },
  {
    "objectID": "slides/01-welcome.html#learning-outcomes",
    "href": "slides/01-welcome.html#learning-outcomes",
    "title": "Welcome to CMPSC 101",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nDescribe data structures and algorithms and their inherent trade-offs.\nSolve problems using data structures and algorithms.\nCharacterize the performance of data structures and algorithms with empirical methods.\nUse IDEs, version control, test suites, and other industry standard tools.\nDocument code in markdown."
  },
  {
    "objectID": "slides/01-welcome.html#other-syllabus-highlights",
    "href": "slides/01-welcome.html#other-syllabus-highlights",
    "title": "Welcome to CMPSC 101",
    "section": "Other Syllabus Highlights",
    "text": "Other Syllabus Highlights\n\nDiscord usage is a major part of participation (20% of overall grade)\nQuizzes on the day following lab, including this week\nLabs are due before lab!\nFour tokens grant automatic extensions for one week\nAfter the first week, five absences will be excused before overall grade is impacted\n\nthree lates are equivalent to an absence"
  },
  {
    "objectID": "slides/01-welcome.html#materials",
    "href": "slides/01-welcome.html#materials",
    "title": "Welcome to CMPSC 101",
    "section": "Materials",
    "text": "Materials\n\n\nCourse Website\n\nsyllabus\nassignment schedule for reading and assignment due dates\nlinks to all course materials"
  },
  {
    "objectID": "slides/01-welcome.html#materials-continued",
    "href": "slides/01-welcome.html#materials-continued",
    "title": "Welcome to CMPSC 101",
    "section": "Materials Continued",
    "text": "Materials Continued\n\n\nGitHub for accessing and submitting assignments\nPython Notebooks/Google Colab for coding examples\nGoogle Forms for participation and group activities\nDiscord for announcements and participation\nCanvas for grades"
  },
  {
    "objectID": "slides/01-welcome.html#tell-us-about-yourself",
    "href": "slides/01-welcome.html#tell-us-about-yourself",
    "title": "Welcome to CMPSC 101",
    "section": "Tell us about yourself!",
    "text": "Tell us about yourself!\n\nName, where you are from, first favorite band, and some of your current favorite foods?"
  },
  {
    "objectID": "slides/01-welcome.html#cis-shared-values",
    "href": "slides/01-welcome.html#cis-shared-values",
    "title": "Welcome to CMPSC 101",
    "section": "CIS Shared Values",
    "text": "CIS Shared Values"
  },
  {
    "objectID": "slides/01-welcome.html#what-if",
    "href": "slides/01-welcome.html#what-if",
    "title": "Welcome to CMPSC 101",
    "section": "What if?",
    "text": "What if?\n\n\n\n\na student knows they are going to be late to a one-on-one office hours appointment?\na student wants to submit their work late but not use a token?\n40% of students in a course listed the same 8 foods as their favorite foods on an exam\na student has a question but has not reviewed notes or read the textbook?\na student writes about a topic that is not in the textbook or notes on an exam?"
  },
  {
    "objectID": "slides/01-welcome.html#setting-up",
    "href": "slides/01-welcome.html#setting-up",
    "title": "Welcome to CMPSC 101",
    "section": "Setting up",
    "text": "Setting up\n\nbookmark the website\nbookmark access to your repos\nbookmark the 101 Discord Channel, or access from the course website\nbookmark notes that you take in Google Colab or elsewhere\nbookmark Canvas\netc."
  },
  {
    "objectID": "slides/01-welcome.html#software-installation",
    "href": "slides/01-welcome.html#software-installation",
    "title": "Welcome to CMPSC 101",
    "section": "Software Installation!",
    "text": "Software Installation!\nSwitch over to the next document"
  },
  {
    "objectID": "slides/05-numerical-computation.html#goals",
    "href": "slides/05-numerical-computation.html#goals",
    "title": "Numerical Computation",
    "section": "Goals",
    "text": "Goals\n\n\nUnderstand and run multiple algorithms for finding a square root\n\nRandom Guessing\nExhaustive Enumeration\nBisection Search"
  },
  {
    "objectID": "slides/05-numerical-computation.html#square-root-definition",
    "href": "slides/05-numerical-computation.html#square-root-definition",
    "title": "Numerical Computation",
    "section": "Square Root Definition",
    "text": "Square Root Definition\n\n\nThe square root of a given number can be multiplied by itself to get the number.\n\\(\\sqrt{49} = 7\\)\n\\(7 * 7 = 49\\)\nHow can a computer find the \\(\\sqrt{}\\) ?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check",
    "href": "slides/05-numerical-computation.html#guess-and-check",
    "title": "Numerical Computation",
    "section": "Guess and Check",
    "text": "Guess and Check\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\nguess a random number as the solution\nconfirm or deny by squaring it\nrepeat until solution is found\n\n\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# loop while solution has not been found\n    # create random guess\n    # square random guess\n    # if random guess squared IS the original number\n        # return random guess!\n    # Otherwise start process again"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check-1",
    "href": "slides/05-numerical-computation.html#guess-and-check-1",
    "title": "Numerical Computation",
    "section": "Guess and Check",
    "text": "Guess and Check\n\n\nimport random\n\ndef squareroot_gc(number: int) -&gt; int:\n  \"\"\"Guess integer roots and check.\"\"\"\n  while True:\n    guess = random.randint(0, number)\n    if guess**2 == number:\n      return guess\n\n\n\n\n\n\nAny concerns with this code?\n\n\n\nmight never end\nonly works with integer guesses for perfect squares!\ncopy and try it below for a perfect square\ncopy and try it below for a non-perfect square"
  },
  {
    "objectID": "slides/05-numerical-computation.html#guess-and-check-with-a-limit",
    "href": "slides/05-numerical-computation.html#guess-and-check-with-a-limit",
    "title": "Numerical Computation",
    "section": "Guess and Check (with a limit)",
    "text": "Guess and Check (with a limit)\n\n\nimport random\n\ndef squareroot_gcl(number: int) -&gt; int:\n  \"\"\"Guess integer roots and check.\"\"\"\n  num_guesses_allowed = 100\n  num_guesses_sofar = 0\n  while num_guesses_sofar &lt; num_guesses_allowed:\n    guess = random.randint(0, number)\n    if guess**2 == number:\n      return guess\n    num_guesses_sofar += 1\n  return -1\n\n\n\n\n\n\n\ncopy and try it below!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#random-guessing-summary",
    "href": "slides/05-numerical-computation.html#random-guessing-summary",
    "title": "Numerical Computation",
    "section": "Random Guessing Summary",
    "text": "Random Guessing Summary\n\n\nSimple algorithm\nMight never find the right answer"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration",
    "text": "Exhaustive Enumeration\n\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\ndon’t do random guessing and checking, do it in an organized way\ncheck every number in a range, in order, exhaustively\nconfirm or deny by squaring it\nrepeat until solution is found\n\n\n\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# loop through a range\n    # Consider index in the range\n    # square the index\n    # if index squared IS the original number\n        # return it!\n    # Otherwise move on to next item in the range"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-for-loop",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-for-loop",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (for loop)",
    "text": "Exhaustive Enumeration (for loop)\n\n\n# Exhaustive Enumeration for perfect squares\n\ndef squareroot_eep(number: int) -&gt; int:\n  \"\"\"Exaustively check integer roots.\"\"\"\n  for possible_answer in range(number):\n    if possible_answer**2 == number:\n      return possible_answer\n  return -1\n\n\n\n\n\n\nAny concerns with this code?\n\n\n\ntry it with 12345 * 12345\ntry it with 144.1 * 144.1\nthe code only works when there is an integer solution"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-while-loop",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-while-loop",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (while loop)",
    "text": "Exhaustive Enumeration (while loop)\n\n\n# Exhaustive Enumeration for perfect squares\n\ndef squareroot_eep_while(number: int) -&gt; int:\n  \"\"\"Exaustively check integer roots.\"\"\"\n  possible_answer = 0\n  while possible_answer**2 &lt;= number:\n    if possible_answer**2 == number:\n        return possible_answer\n    possible_answer += 1\n  return -1 # no answer found\n\n\n\n\n\n\nTry it!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-1",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-1",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration",
    "text": "Exhaustive Enumeration\nExhaustive enumeration is like moving along a number line.\n\n\nBut number lines with integers are only useful for finding the square roots of perfect squares."
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\n\nLet’s use a much finer number line to find non-integer solutions.\nWe will also use the concept of an allowed margin of error, \\(\\epsilon\\) for solutions that are “good enough”.\nFor example, what is the sqrt of 26?\n5.1 * 5.1 = 26.01, so depending on \\(\\epsilon\\), we might accept or reject the solution of 5.1"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-1",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-1",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# define an epsilon (allowed margin of error)\n# define a tiny step size\n# initialize the possible answer\n# while loop so long as possible_answer**2 is too small, allowing for the margin of error \n    # increase possible answer by the tiny step size"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-2",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-non-integer-2",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration (non-integer)",
    "text": "Exhaustive Enumeration (non-integer)\n\n\n# Exhaustive Enumeration for non-perfect squares\n\ndef squareroot_ee(number: int) -&gt; float:\n  \"\"\"Exhaustively check all possible non-integer roots.\"\"\"\n  epsilon = 0.01 # margin of error\n  step_size = epsilon**2\n  possible_answer = 0\n  while possible_answer**2 &lt; number + epsilon:\n    if possible_answer**2 &gt; number - epsilon:\n        return possible_answer # good!\n    possible_answer += step_size\n  return possible_answer # not so good!\n\nprint(squareroot_ee(26))\n\n\n\n5.098100000001457\n\n\n\n\nWhy is line 12 marked as “not so good” after the while loop?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#exhaustive-enumeration-summary",
    "href": "slides/05-numerical-computation.html#exhaustive-enumeration-summary",
    "title": "Numerical Computation",
    "section": "Exhaustive Enumeration Summary",
    "text": "Exhaustive Enumeration Summary\n\n\nPossible solutions are checked in order\nStep sizes can be integer or non-integer\nMany steps could be required!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search",
    "href": "slides/05-numerical-computation.html#bisection-search",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\n\n\n\nHow do you use this?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-1",
    "href": "slides/05-numerical-computation.html#bisection-search-1",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\n\nBisection search is like searching through a Merriam Webster paper dictionary for a specific word.\nYou zero in on the word by going forward or backward multiple times\nFor square roots, you zero in on the solution by going forward or backward multiple times\nThere is no number line in bisection search for square roots\nThere is no step size because the search does not proceed linearly"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-2",
    "href": "slides/05-numerical-computation.html#bisection-search-2",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\nLogical Steps:\n\n\nchoose the number you want to \\(\\sqrt{}\\)\ndefine a search range with an upper and lower bound\ncheck middle number in a range\nconfirm or deny by squaring it\neliminate half of the search range intelligently\nrepeat until a “good enough” solution is found"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-3",
    "href": "slides/05-numerical-computation.html#bisection-search-3",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search\n\nPseudo Code:\n\n# choose a number to take the sqrt of\n# define an epsilon (allowed margin of error)\n# initialize the search space starting and ending value\n# initialize the possible answer to the middle of the search space\n# while loop so long as possible_answer**2 is not _within_ the margin of error (±)\n    # if the possible_answer ** 2 was too large\n        # adjust the search space to be the lower half of the space\n    # Or, if the possible_answer ** 2 was too small\n        # adjust the search space to be the upper half of the space\n    # compute the middle of the new search space and assign that to possible answer\n# assume possible_answer is within the margin of error!\n\n\n\n\n\n\nNote how the start, middle, and end of the search space are used repeatedly"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-4",
    "href": "slides/05-numerical-computation.html#bisection-search-4",
    "title": "Numerical Computation",
    "section": "Bisection Search",
    "text": "Bisection Search"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-number-1",
    "href": "slides/05-numerical-computation.html#bisection-search-number-1",
    "title": "Numerical Computation",
    "section": "Bisection Search (number > 1)",
    "text": "Bisection Search (number &gt; 1)\n\n\n# Bisection Search for non-perfect squares\n\ndef squareroot_bs(number: int) -&gt; float:\n  \"\"\"Perform bisection search to find root.\"\"\"\n  epsilon = 0.01 # margin of error, could be a parameter\n  lower_bound = 0\n  upper_bound = number\n  midpoint = (lower_bound+upper_bound)/2\n  while abs(number - midpoint**2) &gt; epsilon:\n    if midpoint**2 &gt; number:\n      upper_bound = midpoint\n    else:\n      lower_bound = midpoint\n    midpoint = (lower_bound+upper_bound)/2\n  return midpoint\n\nprint(squareroot_bs(144.3))\n\n\n\n12.012155914306641\n\n\n\n\n\nthis algorithm does not work for numbers less than 1, try it!"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-number-1-1",
    "href": "slides/05-numerical-computation.html#bisection-search-number-1-1",
    "title": "Numerical Computation",
    "section": "Bisection Search (number < 1)",
    "text": "Bisection Search (number &lt; 1)\n\n\n# Bisection Search for non-perfect squares\n\ndef squareroot_bs(number: int) -&gt; float:\n  \"\"\"Perform bisection search to find root.\"\"\"\n  epsilon = 0.01 # margin of error, could be a parameter\n  lower_bound = 0\n  if number &lt; 1:\n    upper_bound = 1\n  else:\n    upper_bound = number\n  midpoint = (lower_bound+upper_bound)/2\n  while abs(number - midpoint**2) &gt; epsilon:\n    if midpoint**2 &gt; number:\n      upper_bound = midpoint\n    else:\n      lower_bound = midpoint\n    midpoint = (lower_bound+upper_bound)/2\n  return midpoint\n\nprint(squareroot_bs(0.5))\n\n\n\n0.703125\n\n\n\n\nWhat changed?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#bisection-search-summary",
    "href": "slides/05-numerical-computation.html#bisection-search-summary",
    "title": "Numerical Computation",
    "section": "Bisection Search Summary",
    "text": "Bisection Search Summary\n\n\nPossible solutions are checked in the middle of a search space\nThe search space quickly gets smaller by eliminating half of the space on every iteration\nThere is no guiding step size"
  },
  {
    "objectID": "slides/05-numerical-computation.html#understanding-the-computer",
    "href": "slides/05-numerical-computation.html#understanding-the-computer",
    "title": "Numerical Computation",
    "section": "Understanding the Computer",
    "text": "Understanding the Computer\n\n\nsimple algorithms like random guessing are usually less efficient\ncomputer can never get the exact answer for non perfect squares\nnumerical strategies often require approximation (like using a margin of error)"
  },
  {
    "objectID": "slides/05-numerical-computation.html#challenge",
    "href": "slides/05-numerical-computation.html#challenge",
    "title": "Numerical Computation",
    "section": "Challenge",
    "text": "Challenge\n\nTry to add code that can count how many times the loops repeat for the various methods of computing a square root.\nWhich algorithm runs with the fewest iterations of the loop?"
  },
  {
    "objectID": "slides/05-numerical-computation.html#end",
    "href": "slides/05-numerical-computation.html#end",
    "title": "Numerical Computation",
    "section": "End",
    "text": "End"
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Materials",
    "section": "",
    "text": "Software Operations (Week 1)\n\n\n\n\n\n\n\nRequired Reading: Guttag Chapter 1\nSpecification Lab: CLI vs Script vs Notebook\n\n20 Points\nDue Date: Tu Jan 28 at 2:30pm\nGitHub Classroom Link\n\nStarter Repo\n\n\n\n\n\n\n\n\nFINDING YOU REPOSITORIES\n\n\n\nIf you have already accepted the GitHub Classroom assignment, find your repos by navigating to the repositories tab from the course GitHub organization page: https://github.com/orgs/allegheny-college-cmpsc-101-spring-2025/\n\n\n\n\n\n\nSlides: Welcome Reveal, PDF (M Jan 13)\nSlides: Software installation instructions PDF (Tu Jan 14)\nSlides: Workflow for 101 labs PDF (W Jan 15)"
  },
  {
    "objectID": "materials.html#software-operations",
    "href": "materials.html#software-operations",
    "title": "Materials",
    "section": "",
    "text": "Required Reading: Guttag Chapter 1\nSpecification Lab: CLI vs Script vs Notebook\n\n20 Points\nDue Date: Tu Jan 28 at 2:30pm\nGitHub Classroom Link\n\nStarter Repo\n\n\n\n\n\n\n\n\nFINDING YOU REPOSITORIES\n\n\n\nIf you have already accepted the GitHub Classroom assignment, find your repos by navigating to the repositories tab from the course GitHub organization page: https://github.com/orgs/allegheny-college-cmpsc-101-spring-2025/\n\n\n\n\n\n\nSlides: Welcome Reveal, PDF (M Jan 13)\nSlides: Software installation instructions PDF (Tu Jan 14)\nSlides: Workflow for 101 labs PDF (W Jan 15)"
  },
  {
    "objectID": "materials.html#python-foundations",
    "href": "materials.html#python-foundations",
    "title": "Materials",
    "section": "Python Foundations",
    "text": "Python Foundations\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 2\nEngineering Lab: Integer Squaring\n\n40 Points\nDue Date: Tu Jan 28 at 2:30pm\nGitHub Classroom Link\n\nStarter Repo\n\n\n\n\nFiles\n\nSlides: Linting Reveal (Tu Jan 21)\nSlides: Python Foundations Reveal, PDF (W Jan 22)"
  },
  {
    "objectID": "materials.html#numerical-programs",
    "href": "materials.html#numerical-programs",
    "title": "Materials",
    "section": "Numerical Programs",
    "text": "Numerical Programs\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 3\nMissing Pages\nSpecification Lab: Number Comparison\n\n20 Points\nDue Date: Tu Feb 4 at 2:30pm\nGitHub Classroom Link\nStarter Repo\n\n\n\n\nFiles\n\nSlides: Numerical Computation Reveal, PDF (W Jan 29)"
  },
  {
    "objectID": "materials.html#function-scope",
    "href": "materials.html#function-scope",
    "title": "Materials",
    "section": "Function Scope",
    "text": "Function Scope\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 4\nSpecification Lab: Square Roots\n\n20 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#structured-types",
    "href": "materials.html#structured-types",
    "title": "Materials",
    "section": "Structured Types",
    "text": "Structured Types\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 5\nEngineering Lab: Prime Testing\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#mutability-and-aliasing",
    "href": "materials.html#mutability-and-aliasing",
    "title": "Materials",
    "section": "Mutability and Aliasing",
    "text": "Mutability and Aliasing\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 5 Cont.\nSpecification Lab: Structured Types\n\n20 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#recursion",
    "href": "materials.html#recursion",
    "title": "Materials",
    "section": "Recursion",
    "text": "Recursion\n\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 6\nEngineering Lab: Intersection Algorithms\n\n40 Points \n\nEngineering Lab: Palindromes\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#modules-and-files",
    "href": "materials.html#modules-and-files",
    "title": "Materials",
    "section": "Modules and Files",
    "text": "Modules and Files\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 7\nSpecification Lab: Alias vs Clone\n\n20 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#testing-and-handling-exceptions",
    "href": "materials.html#testing-and-handling-exceptions",
    "title": "Materials",
    "section": "Testing and Handling Exceptions",
    "text": "Testing and Handling Exceptions\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 8 & 9\nEngineering Lab: Fibonacci Algorithms\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#object-oriented-programming",
    "href": "materials.html#object-oriented-programming",
    "title": "Materials",
    "section": "Object-Oriented Programming",
    "text": "Object-Oriented Programming\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 10\nSpecification Lab: Debugging\n\n20 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#algorithmic-complexity",
    "href": "materials.html#algorithmic-complexity",
    "title": "Materials",
    "section": "Algorithmic Complexity",
    "text": "Algorithmic Complexity\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 11\nEngineering Lab: Object Processing\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#data-structures",
    "href": "materials.html#data-structures",
    "title": "Materials",
    "section": "Data Structures",
    "text": "Data Structures\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 12\nEngineering Lab: Containment Checking\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#data-structures-continued",
    "href": "materials.html#data-structures-continued",
    "title": "Materials",
    "section": "Data Structures Continued",
    "text": "Data Structures Continued\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 12 Cont.\nEngineering Lab: Sorting Algorithms\n\n40 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#optimization-problems",
    "href": "materials.html#optimization-problems",
    "title": "Materials",
    "section": "Optimization Problems",
    "text": "Optimization Problems\n\n\nAssignments\n\nRequired Reading: Guttag Chapter 14\nSpecification Lab: Matrix Processing\n\n20 Points \n\n\n\n\nFiles"
  },
  {
    "objectID": "materials.html#review",
    "href": "materials.html#review",
    "title": "Materials",
    "section": "Review",
    "text": "Review"
  },
  {
    "objectID": "materials.html#final",
    "href": "materials.html#final",
    "title": "Materials",
    "section": "Final",
    "text": "Final\n\n\nThursday, May 1, 2025 at 9:00 AM"
  }
]