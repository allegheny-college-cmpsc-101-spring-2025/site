---
title: "Python Foundations"
subtitle: "Guttag Chapter 2"
author: "Prof. Graber"
format: revealjs
slide-number: true
touch: true
controls: true
---

## Goals

- Review Python literals
- Review Python variables and operators
- Review Python loops and conditionals
- Review Python squaring algorithms
- Review Python strings and slicing

# Python Literals

## String

```{python}
#| echo: true
#| output-location: fragment
print("Hello")
print(type("Hello"))
```

. . .

TODO: print your name below


## Integer

```{python}
#| echo: true
#| output-location: fragment
print(101)
print(type(101))
```

. . .

TODO: print an integer literal that is negative


## Float

```{python}
#| echo: true
#| output-location: fragment
print(101.1)
print(type(101.1))
```

. . .

TODO: print a float literal that is negative


## Boolean

```{python}
#| echo: true
#| output-location: fragment
print(True)
print(type(True))
```

. . .

TODO: print a boolean literal that is not `True`


## List


```{python}
#| echo: true
#| output-location: fragment
print([False, -12, -34.1, "literals!"])
print(type([False, -12, -34.1, "literals!"]))
```

. . .

TODO: print a list literal that has 3 integers


## Tuple


```{python}
#| echo: true
#| output-location: fragment
print((False, -12, -34.1, "literals!"))
print(type((False, -12, -34.1, "literals!")))
```

. . .

TODO: print a tuple literal that has 3 floats


# Python Variables and Operators

## Assignment

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3"
a = [False, -12, -34.1, "assignment!"]
print(a)
print(type(a))
```

::: incremental
- `[False, -12, -34.1, "assignment!"]` is the object in memory
- `a` is the variable name given to the object
- `=` operator used
- variable name always goes on the left hand side of `=`
:::

## Arithmetic


```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7|8|10-15"
item1 = 100
item2 = 11
addition_ex = item1 + item2
mult_ex = item1 * item2
div_ex = item1 / item2
floor_div_ex = item1 // item2
power_ex = item2 ** 2
mod_ex = item2 % 7 

print(f"addition_ex is {addition_ex}")
print(f"mult_ex is {mult_ex}")
print(f"div_ex is {div_ex}")
print(f"floor_div_ex is {floor_div_ex}")
print(f"power_ex is {power_ex}")
print(f"mod_ex is {mod_ex}")
```

## Comparison


```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7|8|10-15"
item1 = 100
item2 = 11
gt = item1 > item2
lt = item1 < item2
gte = item1 >= item2
lte = item1 <= item2
equal = item1 == item2
not_equal = item1 != item2

print(f"item1 > item2 is {gt}")
print(f"item1 < item2 is {lt}")
print(f"item1 >= item2 is {gte}")
print(f"item1 <= item2 is {lte}")
print(f"item1 == item2 is {equal}")
print(f"item1 != item2 is {not_equal}")
```



# Python Loops and Conditionals

## For Loop

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2"
for i in range(10):
    print(i)
```

## For Loop

```{python}
#| echo: true
#| output: false
for i in range(10):
    print(i)
```

TODO: Write a for loop to print out the square root of every even integer between 2 and 64, including 64


## While Loop

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4"

i = 0
while i < 10:
    print(i)
    i += 1
```

## While Loop

```{python}
#| echo: true
#| output: false
i = 0
while i < 10:
    print(i)
    i += 1
```

TODO: What happens if you forget to increment the counter?


## Conditional


```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7"
i = 0
while i < 10:
    if i % 2 == 1:
        print(f"{i} is odd!")
    elif i % 3 == 0:
        print(f"{i} is divisible by 3!")
    i += 1
```

## Conditional

TODO: Write one loop that prints "fizz" for every even number, "buzz" for every multiple of 5, and "fizzbuzz" for even multiples of 5 for integers from 0 to 20 including 20.


# Python Squaring Algorithms

## Square by Addition in a For Loop

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7|8|9"
# choose a value to square
value = 6
# initialize the answer
answer = 0
# repeatedly increase the answer until getting to the value
for _ in range(value):
    answer += value    
# print the computed integer squared using a for loop
print(f"{value} squared is {answer}")
```

## Square by Addition in a While Loop


```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7|8|9"
# choose a value to square
value = 7
# initialize the number of iterations and the answer
i = 0
answer = 0
# repeatedly increase the answer until getting to the value
while i < value:
    answer += value
    i += 1    
# print the computed integer squared using a while loop
print(f"{value} squared is {answer}")
```

## Abstracting to a Function


```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4|5|6|7|8|9|10|11|12"
# choose a value to square
def square_by_addition_while(value: int) -> int:
    """Square a number by addition in a while loop."""
    # initialize the number of iterations and the answer
    i = 0
    answer = 0
    # repeatedly increase the answer until getting to the value
    while i < value:
        answer += value
        i += 1    
    # return the computed integer squared using a while loop
    return answer
```


## Abstracting to a Function {.smaller}

```{python}
#| echo: true
#| output-location: fragment
# choose a value to square
def square_by_addition_while(value: int) -> int:
    """Square a number by addition in a while loop."""
    # initialize the number of iterations and the answer
    i = 0
    answer = 0
    # repeatedly increase the answer until getting to the value
    while i < value:
        answer += value
        i += 1    
    # return the computed integer squared using a while loop
    return answer
```

Notice:

- keyword `def`
- indentation
- type annotations for input and output `: int` and `-> int`
- docstring `"""Square..."""`
- return statement `return`

TODO: Copy and run it! Why didn't anything print?

## Abstracting to a Function {.smaller}

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "14|15|16"
# choose a value to square
def square_by_addition_while(value: int) -> int:
    """Square a number by addition in a while loop."""
    # initialize the number of iterations and the answer
    i = 0
    answer = 0
    # repeatedly increase the answer until getting to the value
    while i < value:
        answer += value
        i += 1    
    # return the computed integer squared using a while loop
    return answer

my_value = 12
my_answer = square_by_addition_while(my_value)
print(f"{my_value} squared is {my_answer}")
```

. . .

TODO: What happens if you try to print `print(f"{value} squared is {answer}")`? Clear, then copy the code below, and run it.

# Python Strings and Slicing

## Formatted Strings

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3"
value = 12345
formatted_string = f"the value is {value}"
print(formatted_string)
```

## Slicing

```{python}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|2|3|4"
value = 12345
formatted_string = f"the value is {value}"
print(formatted_string)
print(formatted_string[4:14:1])
```

. . .

The indices are the starting point, the end point (non-inclusive), the hop

## Find Further Review in Chapter 2
